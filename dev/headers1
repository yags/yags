`AddEdges( <G>, <E> )'\newline\hglue 5mm 
Returns a new graph obtained from <G> by adding the list of edges in <E>.

`AddVerticesByAdjacencies( <G>, <NewAdjList> )'\newline\hglue 5mm 
Returns a new graph obtained from <G> by adding some vertices with adjacencies described by <NewAdjList>.

`Adjacencies( <G> )'\newline\hglue 5mm 
Returns the list of adjacencies of <G>: The neighbors of vertex <x> are listed in position <x> of that list.

`Adjacency( <G>, <x> )'\newline\hglue 5mm 
Returns the list of vertices in <G> which are adjacent to vertex <x>.

`AdjMatrix( <G> )'\newline\hglue 5mm 
Returns the Adjacency Matrix of <G>.

`AGraph'\newline\hglue 5mm 
A 4-cycle with two pendant vertices on consecutive vertices of the cycle.

`AntennaGraph'\newline\hglue 5mm 
A `HouseGraph' with a pendant vertex (antenna) on the roof.

`AutGroupGraph( <G> )'\newline\hglue 5mm 
Returns the automorphism group of graph <G>. A synonym is `AutomorphismGroup( <G> )'.

`Backtrack( <L>, <opts>, <chk>, <done>, <extra> )'\newline\hglue 5mm 
Returns the next solution (after <L>) to a backtracking combinatorial problem specified by its parameters.

`BacktrackBag( <opts>, <chk>, <done>, <extra> )'\newline\hglue 5mm 
Returns the list of all solutions to a backtracking combinatorial problem specified by its parameters.

`Basement( <G>, <KnG>, <x> )'\newline
`Basement( <G>, <KnG>, <V> )'\newline\hglue 5mm 
Returns the basement of vertex <x> (vertex set <V>) of the iterated clique graph <KnG> with respect to <G>.

`BoxProduct( <G>, <H> );'\newline\hglue 5mm 
Returns the BoxProduct (or cartesian product) of graphs <G> and <H>.

`BoxTimesProduct( <G>, <H> )'\newline\hglue 5mm 
Returns the BoxTimesProduct (or strong product) of graphs <G> and <H>.

`BullGraph'\newline\hglue 5mm 
A triangle with two pendant vertices (horns).

`CayleyGraph( <Grp> )'\newline
`CayleyGraph( <Grp>, <elms> )'\newline\hglue 5mm 
Returns the CayleyGraph of group <Grp>.

`ChairGraph'\newline\hglue 5mm 
A tree with degree sequence 3,2,1,1,1.

`Circulant( <n>, <jumps> )'\newline\hglue 5mm 
Returns minimal $(1, 2, ..., n)$-invariant graph where vertex 1 is adjacent to vertices in <jumps>.

`ClawGraph'\newline\hglue 5mm 
The graph on 4 vertices, 3 edges, and maximum degree 3.

`CliqueGraph( <G> )'\newline
`CliqueGraph( <G>, <MaxNumCli> )'\newline\hglue 5mm 
Returns the intersection graph of the (maximal) cliques of <G>; aborts if <MaxNumCli> cliques are found.

`CliqueNumber( <G> )'\newline\hglue 5mm 
Returns the order, $omega(G)$, of a maximum clique of <G>.

`Cliques( <G> )'\newline
`Cliques( <G>, <MaxNumCli> )'\newline\hglue 5mm 
Returns the list of (maximal) cliques of <G>; aborts if <MaxNumCli> cliques are found.

`ComplementGraph( <G> )'\newline\hglue 5mm 
Returns the new graph <H> such that  $V(H)=V(G)$ and $xy\in E(H) \iff xy \not\in E(G)$.

`CompleteBipartiteGraph( <n>, <m> )'\newline\hglue 5mm 
Returns the minimal graph such that all vertices in $\{1..n\}$ are adjacent to all in $\{n+1..n+m\}$.

`CompleteGraph( <n> )'\newline\hglue 5mm 
Returns the graph on <n> vertices having all possible edges present.

`CompletelyParedGraph( <G> )'\newline\hglue 5mm 
Returns the graph obtained from <G> by iteratively removing all dominated vertices. 

`CompleteMultipartiteGraph( <n1>, <n2> [, <n3> ...] )'\newline\hglue 5mm 
Returns the graph with $r\geq 2$ parts of orders <n1>, <n2>, ... such that each vertex is adjacent exactly to all the vertices in the other parts not containing itself.

`CompletesOfGivenOrder( <G>, <Ord> )'\newline\hglue 5mm 
Returns the list of vertex sets of all complete subgraphs of order <Ord> of <G>.

`Composition( <G>, <H> )'\newline\hglue 5mm 
Returns the composition $G[H]$ of two graphs <G> and <H>.

`Cone( <G> )'\newline\hglue 5mm 
Returns a new graph obtained from <G> by adding a new vertex which is adjacent to all vertices of <G>.

`ConnectedComponents( <G> )'\newline\hglue 5mm 
Returns the equivalece partition of $V(G)$ corresponding to the equivalence relation *reachable* in <G>.

`Coordinates( <G> )'\newline\hglue 5mm 
Returns the list of coordinates of the vertices of <G> if they exist; fail otherwise.

`CopyGraph( <G> ) '\newline\hglue 5mm 
Returns a fresh copy of <G>. Useful to change the category of a graph.

`CuadraticRingGraph( <Rng> )'\newline\hglue 5mm 
Returns a graph <H> whose vertices are the elements of the ring <Rng> and $xy\in E(H) \iff x+z^2=y$ for some z in <Rng>.

`Cube'\newline\hglue 5mm 
The 1-skeleton of Plato's cube.

`CubeGraph( <n> )'\newline\hglue 5mm 
Returns the underlying graph of the <n>-hypercube.

`CycleGraph( <n> )'\newline\hglue 5mm 
Returns the cyclic graph on <n> vertices. 

`CylinderGraph( <Base>, <Height> )'\newline\hglue 5mm 
Returns graph on $Base*(Height+1)$ vertices which is a $\{4,6\}-regular$ triangulation of the cylinder.

`DartGraph'\newline\hglue 5mm 
A diamond with a pending vertex and maximum degree 4.

`DeclareQtfyProperty( <Name>, <Filter> )'\newline\hglue 5mm 
For internal use. Declare a quantifiable property.

`Diameter( <G> )'\newline\hglue 5mm 
Returns the maximum among the distances between pairs of vertices of <G>.

`DiamondGraph'\newline\hglue 5mm 
The graph on 4 vertices and 5 edges.

`DiscreteGraph( <n> )'\newline\hglue 5mm 
Returns the graph on <n> vertices with no edges.

`DisjointUnion( <G>, <H> )'\newline\hglue 5mm 
Returns the disjoint union of two graphs <G> and <H>.

`Distance( <G>, <x>, <y> )'\newline\hglue 5mm 
Returns the length of a minimal path connecting <x> to <y> in <G>.

`DistanceGraph( <G>, <Dist> )'\newline\hglue 5mm 
Returns a new graph where two vertices are adjacent iff the distance between them belongd to <Dist>.

`DistanceMatrix( <G> )'\newline\hglue 5mm 
Returns an $n\times n$ matrix $D$, where $D[x][y]$ is the distance between <x> and <y> in <G>.

`DistanceSet( <G>, <A>, <B> )'\newline\hglue 5mm 
Returns the set of distances between pairs of vertices in $A\times B$.

`Distances( <G>, <A>, <B> )'\newline\hglue 5mm 
Returns the list of distances between pairs of vertices in $A\times B$.

`Dodecahedron'\newline\hglue 5mm 
The 1-skeleton of Plato's Dodecahedron.

`DominatedVertices( <G> )'\newline\hglue 5mm 
Returns the set of dominated vertices of <G>.

`DominoGraph'\newline\hglue 5mm 
Two squares glued by an edge.

`Draw( <G> )'\newline\hglue 5mm 
Draws the graph <G> on a new window.

`DumpObject( <Obj> )'\newline\hglue 5mm 
For internal use. Dumps  all information available for object <Obj>.

`EasyExec( <dir>, <progname>, <instring> )'\newline
`EasyExec( <progname>, <instring> )'\newline\hglue 5mm 
Calls the external program <progname> with input string <instring>; returns the output string.

`Eccentricity( <G>, <x> )'\newline\hglue 5mm 
Returns  the  distance  from a vertex <x> in graph <G> to its most distant vertex in <G>.

`Edges( <G> )'\newline\hglue 5mm 
Returns the list of edges of graph <G>.

`FanGraph( <N> )'\newline\hglue 5mm 
Returns the <N>-Fan: The join of a vertex and a <(N+1)>-path.

`FishGraph'\newline\hglue 5mm 
A square and a triangle glued by a vertex.

`GemGraph'\newline\hglue 5mm 
The 3-Fan graph.

`Graph( <Rec> )'\newline\hglue 5mm 
Returns  a  new  graph  created  from  the  information in record  <Rec>.

`GraphByAdjacencies( <AdjList> )'\newline\hglue 5mm 
Returns  a  new  graph  having  <AdjList>  as its list of adjacencies.

`GraphByAdjMatrix( <Mat> )'\newline\hglue 5mm 
Returns  a  new  graph  created from an adjacency matrix <Mat>.

`GraphByCompleteCover( <Cover> )'\newline\hglue 5mm 
Returns the graph where the elements of <Cover> are (the vertex sets of) complete subgraphs.

`GraphByEdges( <L> )'\newline\hglue 5mm 
Returns the minimal graph such that the pairs in <L> are edges.

`GraphByRelation( <V>, <Rel> )'\newline
`GraphByRelation( <N>, <Rel> )'\newline\hglue 5mm 
Returns  a  new  graph  <G> where $xy \in E(G)$ iff <Rel(x,y)=true>.

`GraphByWalks( <Walk1>, <Walk2>,...)'\newline\hglue 5mm 
Returns the minimal graph such that <Walk1>, <Walk2>, etc are Walks.

`GraphCategory( [ <G>, ... ] );'\newline\hglue 5mm 
For internal use. Returns the minimal common category to a list of graphs.

`Graphs()'\newline\hglue 5mm 
The category of all  graphs  that  can  be  represented in YAGS.

`GraphSum( <G>, <L> )'\newline\hglue 5mm 
Returns the lexicographic sum of a list of graphs <L> over a graph <G>.

`GraphToRaw( <filename>, <G> )'\newline\hglue 5mm 
Writes the graph <G> in raw format to the file  <filename>.

`GraphUpdateFromRaw( <filename>, <G> )'\newline\hglue 5mm 
Updates  the  coordinates  of  <G>  from  a file <filename> in raw format.

`GroupGraph( <G>, <Grp> )'\newline
`GroupGraph( <G>, <Grp>, <act> )'\newline\hglue 5mm 
Returns the minimal <Grp>-invariant (under the action <act>) graph containing <G>.

`HouseGraph'\newline\hglue 5mm 
A 4-Cycle and a triangle glued by an edge.

`Icosahedron'\newline\hglue 5mm 
The 1-skeleton of Plato's icosahedron.

`in(<G>,<Catgy>)'\newline\hglue 5mm 
Returns  `true'  if  graph  <G>  belongs  to  category <Catgy> and `false' otherwise.

`InducedSubgraph( <G>, <V> )'\newline\hglue 5mm 
Returns the subgraph of graph <G> induced by the vertex set <V>.

`InNeigh( <G>, <x> )'\newline\hglue 5mm 
Returns the list of in-neighbors of <x> in <G>.

`IntersectionGraph( <L> )'\newline\hglue 5mm 
Returns the graph <G> where $V(G)=L$ and $XY\in E(G) \iff X\cap Y \neq \varnothing$.

`IsBoolean( <Obj> )'\newline\hglue 5mm 
Returns `true' if object <O> is `true' or `false' and `false' otherwise.

`IsCliqueGated( <G> )'\newline\hglue 5mm 
Returns `true' if <G> is a clique gated graph.

`IsCliqueHelly( <G> )'\newline\hglue 5mm 
Returns  `true'  if  the  set of (maximal) cliques <G> satisfy the <Helly> property.

`IsComplete( <G>, <L> )'\newline\hglue 5mm 
Returns true if <L> induces a complete subgraph of <G>.

`IsCompleteGraph(<G>)'\newline\hglue 5mm 
Returns  `true'  if graph <G> is a complete graph, `false' otherwise.

`IsDiamondFree( <G> )'\newline\hglue 5mm 
Returns `true' if <G> is free from induced diamonds, `false' otherwise.

`IsEdge( <G> , [x,y])'\newline\hglue 5mm 
Returns true if [x,y] is an edge of <G>.

`IsIsomorphicGraph( <G>, <H> )'\newline\hglue 5mm 
Returns `true' when <G> is isomorphic to <H> and `false' otherwise.

`IsLoopless(<G>)'\newline\hglue 5mm 
Returns `true' when <G> is isomorphic to <H> and `false' otherwise.

`IsoMorphism( <G>, <H> )'\newline\hglue 5mm 
Returns one isomorphism from <G> to <H>; `fail' if there is none.

`IsoMorphisms( <G>, <H> )'\newline\hglue 5mm 
Returns  the  list  of  all  isomorphism  from  <G> to <H>.

`IsOriented( <G> )'\newline\hglue 5mm 
Returns `true' if whenever xy is an edge (arrow)  of <G>, yx is not.

`IsSimple( <G> )'\newline\hglue 5mm 
Returns `true' if <G> contains no loops and no arrows.

`IsTournament( <G> )'\newline\hglue 5mm 
Returns `true' if <G> contains no loops or edges but only arrows and it is maximal w.r.t. this property.

`IsTransitiveTournament( <G> )'\newline\hglue 5mm 
Returns `true' if <G> is a Tournament and whenever $xy$ and $yz$ are arrows, then $xz$ is an arrow too.

`IsUndirected(<G>)'\newline\hglue 5mm 
Returns `true' if whenever xy is an edge (arrow) of <G>, yx is also an edge of <G>.

`JohnsonGraph( <n>, <r> )'\newline\hglue 5mm 
Returns a new graph <G> where <V(G)> is the set of <r>-subsets of $\{1,2 \ldots n\}$, two of them being adjacent iff their intersection contains exactly <r>-1 elements.

`Join( <G>, <H> )'\newline\hglue 5mm 
Returns the disjoint union of <G> and <H> with all the possible edges between <G> and <H> added.

`KiteGraph'\newline\hglue 5mm 
A diamond with a pendant vertex and maximum degree 3.

`LineGraph( <G> )'\newline\hglue 5mm 
Returns the intersection graph of the edges of <G>.

`Link( <G>, <x> )'\newline\hglue 5mm 
Returns the subgraph induced in <G> by the neighbors of <x>.

`Links( <G> )'\newline\hglue 5mm 
Returns  the  list  of  subgraphs  of <G> induced by the neighbors of each vertex of <G>.

`LooplessGraphs()'\newline\hglue 5mm 
The category of all graph that may contain arrows and edges but no loops.

`MaxDegree( <G> )'\newline\hglue 5mm 
Returns the maximum degree in graph <G>.

`MinDegree( <G> )'\newline\hglue 5mm 
Returns the minimum degree in graph <G>.

`NextIsoMorphism( <G>, <H>, <f> );'\newline\hglue 5mm 


`NextPropertyMorphism( <G1>, <G2>, <f>, <PropList> )'\newline\hglue 5mm 
Returns the next morphism (after <f>) from <G1> to <G2> satisfying  the  list  of  properties  <PropList>.

`NumberOfCliques( <G> )'\newline
`NumberOfCliques( <G>, <MaxNumCli> )'\newline\hglue 5mm 
Returns  the  number of (maximal) cliques of <G>.

`NumberOfConnectedComponents( <G> )'\newline\hglue 5mm 
Returns the number of connected components of <G>.

`OctahedralGraph( <n> )'\newline\hglue 5mm 
Returns the <(2n-2)>-regular graph on $2n$ vertices.

`Octahedron'\newline\hglue 5mm 
The 1-skeleton of Plato's octahedron.

`Order(<G>)'\newline\hglue 5mm 
Returns the number of vertices, of graph <G>.

`OrientedGraphs()'\newline\hglue 5mm 
The category of all graphs that may contain arrows but no edges or loops.

`OutNeigh( <G>, <x> )'\newline\hglue 5mm 
Returns the list of out-neighbors of <x> in <G>.

`ParachuteGraph'\newline\hglue 5mm 
Returns the suspension of a 4-path with a pendant vertex attached to the south pole.

`ParapluieGraph'\newline\hglue 5mm 
A 3-Fan graph with a 3-path attached to the universal vertex.

`ParedGraph( <G> )'\newline\hglue 5mm 
Returns the induced subgraph obtained from   <G>  by  removing  its  dominated  vertices.

`PathGraph( <n> )'\newline\hglue 5mm 
Returns the path graph on <n> vertices.

`PawGraph'\newline\hglue 5mm 
A triangle with a pendant vertex.

`PetersenGraph'\newline\hglue 5mm 
The 3-regular graph on 10 vertices having girth 5.

`PowerGraph( <G>, <exp> )'\newline\hglue 5mm 
Returns a new graph where two vertices are neighbors iff their distance in <G> is less than or equal to <exp>.

`PropertyMorphism( <G1>, <G2>, <PropList> )'\newline\hglue 5mm 
Returns  the  first  morphism from <G1> to <G2> satisfying the list of properties <PropList>.

`PropertyMorphisms( <G1>, <G2>, <PropList> )'\newline\hglue 5mm 
Returns all morphisms from <G1> to <G2> satisfying the list of properties <PropList>.

`QtfyIsSimple( <G> )'\newline\hglue 5mm 
For internal use. Returns how far is graph <G> from being simple.

`QuotientGraph( <G>, <Part> )'\newline
`QuotientGraph( <G>, <L1>, <L2> )'\newline\hglue 5mm 
Returns the quotient graph of graph <G> given a vertex partition <Part>, by identifying any two vertices in the same part.

`Radius( <G> )'\newline\hglue 5mm 
Returns the minimal eccentricity among the vertices of graph <G>.

`RandomGraph( <n>, <p> )'\newline
`RandomGraph( <n> )'\newline\hglue 5mm 
Returns a random graph of order <n> with edge probability $p$ (a rational in  [0,1]$.

`RandomlyPermuted( <Obj> )'\newline\hglue 5mm 
Returns  a copy of <Obj> with the order of its elements permuted randomly.

`RandomPermutation( <N> )'\newline\hglue 5mm 
Returns a random permutation of the list <[1..N]>.

`RemoveEdges( <G>, <E> )'\newline\hglue 5mm 
Returns  a  new graph created from graph <G> by removing the edges in list <E>.

`RemoveVertices( <G>, <V> )'\newline\hglue 5mm 
Returns  a  new  graph  created from graph <G> by removing the vertices in list <V>.

`RGraph'\newline\hglue 5mm 
A  square  with  two  pendant  vertices attached to the same vertex of the square.

`RingGraph( <Rng>, <elms> )'\newline\hglue 5mm 
Returns  the  graph  G  whose  vertices are the elements of the ring <Rng>
such that x is adjacent to y iff x+r=y for some r in <elms>.

`SetCoordinates( <G>, <Coord> ) '\newline\hglue 5mm 
Sets  the  coordinates  of the vertices of <G>, which are used to draw <G> by `Draw( <G> )'.

`SetDefaultGraphCategory( <Catgy> )'\newline\hglue 5mm 
Sets  the default graph category to <Catgy>.

`SimpleGraphs()'\newline\hglue 5mm 
The category of all graphs which may contain edges but no arrows or loops. 

`Size(<G>)'\newline\hglue 5mm 
Returns the number of edges of graph <G>.

`SnubDisphenoid'\newline\hglue 5mm 
The 1-skeleton of the 84th Johnson solid.

`SpanningForest( <G> )'\newline\hglue 5mm 
Returns a spanning forest of <G>.

`SpanningForestEdges( <G> )'\newline\hglue 5mm 
Returns the edges of a spanning forest of <G>.

`SpikyGraph( <N> )'\newline\hglue 5mm 
Returns a complete on <N> vertices, with an additional complete on <N> vertices glued to each of its <N-1> <N-1>-dimensional faces.

`SunGraph( <N> )'\newline\hglue 5mm 
Returns a complete graph on <N> vertices with a zigzaging corona of <2N> vertices glued to a <N>-cycle of the complete graph.

`Suspension( <G> )'\newline\hglue 5mm 
Returns the graph obtained from  <G> by adding two new vertices which are adjacent to every
vertex of <G> but not to each other.

`TargetGraphCategory( [ <G>, ... ] );'\newline\hglue 5mm 
For internal use. Within YAGS methods, returns the graph category to which the new graph will belong.

`Tetrahedron'\newline\hglue 5mm 
The 1-skeleton of Plato's tetrahedron.

`TimeInSeconds()'\newline\hglue 5mm 
Returns the time in seconds since 1970-01-01 00:00:00 UTC as an integer.

`TimesProduct( <G>, <H> )'\newline\hglue 5mm 
Returns  the  times  product (tensor product) $G  \times  H$ of two graphs <G> and <H>.

`TrivialGraph'\newline\hglue 5mm 
The one vertex graph.

`UFFind( <UFS>, <x> )'\newline\hglue 5mm 
For  internal  use.  Implements  the  <find>  operation on the <union-find structure>. 

`UFUnite( <UFS>, <x>, <y> )'\newline\hglue 5mm 
For  internal  use.  Implements  the  <unite> operation on the <union-find structure>.

`UndirectedGraphs()'\newline\hglue 5mm 
The category of all graphs that may contain loops and edges but no arrows.

`UnitsRingGraph( <Rng> )'\newline\hglue 5mm 
Returns  the graph G whose vertices are the elements of <Rng>  such that x
is adjacent to y iff x+z=y for some unit z of <Rng>.

`VertexDegree( <G>, <x> )'\newline\hglue 5mm 
Returns the degree of vertex <x> in Graph <G>.

`VertexDegrees( <G> )'\newline\hglue 5mm 
Returns the list of degrees of the vertices in graph <G>.

`VertexNames(<G>)'\newline\hglue 5mm 
Return  the  list of names of the vertices of <G>.

`Vertices( <G> )'\newline\hglue 5mm 
Returns the list [1..Order( <G> )].

`WheelGraph( <N> )'\newline
`WheelGraph( <N>, <Radius> )'\newline\hglue 5mm 
This  is  the   cone  of  an  <N>-cycle

`YagsExec( <progname>, <instring> )'\newline\hglue 5mm 
For  internal  use.  Calls  external  program  <prog> located in directory
'<yags-dir>/bin/'  feeding  it with <instring> as input and returning  the
output  of  the  external  program  as a string.

