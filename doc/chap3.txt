  
  [1X3 [33X[0;0YCliques and Clique Graphs[133X[101X
  
  [33X[0;0YA  [13Xclique[113X is a maximal complete subgraph (other texts use [13Xmaxclique[113X for this
  concept).  It  is common to identify induced subgraphs of a graph with their
  vertex  sets; accordingly, a clique in [5XYAGS[105X is actually a set of vertices of
  a  graph  such  that  any  two  vertices  in  the clique are adjacent in the
  considered graph.[133X
  
  [33X[0;0YThe  [13Xclique  graph[113X,  [22XK(G)[122X, of a graph [22XG[122X is the intersection graph of all the
  cliques of [22XG[122X: Each clique of [22XG[122X is a vertex of [22XK(G)[122X, two of them are adjacent
  in [22XK(G)[122X if and only if they have a non-empty intersection.[133X
  
  [33X[0;0YA  number  of  [5XYAGS[105X's  features  concerning  cliques  and  clique graphs are
  described in this chapter.[133X
  
  
  [1X3.1 [33X[0;0YCliques and Clique Number[133X[101X
  
  [33X[0;0YYou  can  get  the  set  of  all  the cliques of a graph by means of [2XCliques[102X
  ([14XB.3-7[114X);  if  you want to know the completes of given order (maximal or not)
  you may use [2XCompletesOfGivenOrder[102X ([14XB.3-14[114X) instead.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=SunGraph(4);;[127X[104X
    [4X[25Xgap>[125X [27XCliques(g);[127X[104X
    [4X[28X[ [ 2, 4, 6, 8 ], [ 2, 3, 4 ], [ 1, 2, 8 ], [ 4, 5, 6 ], [ 6, 7, 8 ] ][128X[104X
    [4X[25Xgap>[125X [27XCompletesOfGivenOrder(g,3);[127X[104X
    [4X[28X[ [ 1, 2, 8 ], [ 2, 3, 4 ], [ 2, 4, 6 ], [ 2, 4, 8 ], [ 2, 6, 8 ], [128X[104X
    [4X[28X  [ 4, 5, 6 ], [ 4, 6, 8 ], [ 6, 7, 8 ] ][128X[104X
    [4X[25Xgap>[125X [27XCompletesOfGivenOrder(g,4);[127X[104X
    [4X[28X[ [ 2, 4, 6, 8 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YNote  that [10XCompletesOfGivenOrder[110X uses a simple, straightforward backtracking
  algorithm, whereas [10XCliques[110X uses the Bron-Kerbosch algorithm [4] which in our
  experience  is  the  best  algorithm  for  finding all cliques of a graph in
  practice.  In  particular, [10XCliques[110X is much faster than [10XCompletesOfGivenOrder[110X
  (when comparable).[133X
  
  [33X[0;0YIn  [5XYAGS[105X  all graphs are [13Ximmutable[113X, that is, once created, all graphs always
  remain  exactly  the same graph. If you need to modify a graph, you actually
  construct a new graph by copying the first graph and (for example) adding or
  deleting some edges (all of this in a single atomic step) therefore creating
  a  new  immutable  graph.  All  graph-modifying  operations  in  [5XYAGS[105X  (e.g.
  [10XAddEdges[110X,  [10XRemoveEdges[110X,  etc.)  work  in this way. This is time-consuming if
  your  work  involves  many  frequent graph editions. On the other hand, this
  design   decision  allows  us  to  meaningfully  store  all  computed  graph
  attributes  within  the graph itself: Since the graph is not going to change
  ever,  it  will  always  have the same order, size, clique number, etc. [5XYAGS[105X
  does  exactly this with all graph attributes and properties. This means that
  no  attribute is ever computed twice for the same graph and in particular it
  has a very clear effect on computing time:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=RandomGraph(200);;                  [127X[104X
    [4X[25Xgap>[125X [27XCliques(g);;time;    [127X[104X
    [4X[28X5784[128X[104X
    [4X[25Xgap>[125X [27XCliques(g);;time;    [127X[104X
    [4X[28X0[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  [13Xclique  number[113X, [22XÏ‰(G)[122X, is the order of a maximum clique (all cliques are
  maximal,  but  they  may be of several different orders). On the other hand,
  the [13Xnumber of cliques[113X, is simply the cardinality of the set of all cliques.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=SunGraph(4);;[127X[104X
    [4X[25Xgap>[125X [27XCliqueNumber(g);[127X[104X
    [4X[28X4[128X[104X
    [4X[25Xgap>[125X [27XNumberOfCliques(g);[127X[104X
    [4X[28X5[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFor random graphs with edge probability [22Xp[122X and taking [22Xb:=1/p[122X, it is known [2]
  that  the  distribution  of  the  clique number has a very concentrated peak
  around [23X2\log_{b}n-2\log_{b}\log_{b}n +2\log_{b}(\frac{e}{2})[123X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGraphAttributeStatistics([10,20..70],1/2,CliqueNumber);[127X[104X
    [4X[28X[ [ [ 3, 29 ], [ 4, 61 ], [ 5, 9 ], [ 6, 1 ] ], [128X[104X
    [4X[28X  [ [ 4, 5 ], [ 5, 64 ], [ 6, 31 ] ], [128X[104X
    [4X[28X  [ [ 5, 5 ], [ 6, 64 ], [ 7, 29 ], [ 8, 2 ] ], [128X[104X
    [4X[28X  [ [ 6, 20 ], [ 7, 72 ], [ 8, 8 ] ], [128X[104X
    [4X[28X  [ [ 7, 55 ], [ 8, 42 ], [ 9, 3 ] ], [128X[104X
    [4X[28X  [ [ 7, 17 ], [ 8, 75 ], [ 9, 7 ], [ 10, 1 ] ], [128X[104X
    [4X[28X  [ [ 8, 66 ], [ 9, 32 ], [ 10, 2 ] ] ][128X[104X
    [4X[25Xgap>[125X [27XList([10,20..70],n->2*Log2(Float(n))                        [127X[104X
    [4X[25X>[125X [27X-2*Log2(Log2(Float(n))) + 2*Log2(FLOAT.E/2));             [127X[104X
    [4X[28X[ 4.0652, 5.3059, 6.10955, 6.70535, 7.17974, 7.57437, 7.91252 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YNot so much the distribution of the number of cliques:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGraphAttributeStatistics([10,20..70],1/2,NumberOfCliques);[127X[104X
    [4X[28X[ [ [ 7, 4 ], [ 8, 4 ], [ 9, 18 ], [ 10, 23 ], [ 11, 23 ], [128X[104X
    [4X[28X      [ 12, 13 ], [ 13, 8 ], [ 14, 5 ], [ 16, 1 ], [ 17, 1 ] ], [128X[104X
    [4X[28X  [ [ 36, 1 ], [ 40, 2 ], [ 41, 3 ], [ 42, 1 ], [ 43, 4 ], [128X[104X
    [4X[28X      [ 44, 4 ], [ 45, 2 ], [ 46, 4 ], [ 47, 1 ], [ 48, 5 ], [128X[104X
    [4X[28X      [ 49, 2 ], [ 50, 1 ], [ 51, 5 ], [ 52, 6 ], [ 53, 6 ], [128X[104X
    [4X[28X      [ 54, 5 ], [ 55, 6 ], [ 56, 4 ], [ 57, 5 ], [ 58, 7 ], [128X[104X
    [4X[28X      [ 59, 4 ], [ 60, 2 ], [ 61, 3 ], [ 62, 3 ], [ 63, 4 ], [128X[104X
    [4X[28X      [ 64, 3 ], [ 66, 3 ], [ 67, 1 ], [ 68, 1 ], [ 72, 1 ], [128X[104X
    [4X[28X      [ 77, 1 ] ], [128X[104X
    [4X[28X   [ [ 130, 1 ], [ 133, 1 ], [ 135, 1 ], [ 137, 1 ], [ 142, 1 ],[128X[104X
    [4X[28X      [128X[104X
    [4X[28X   --- many more lines here ---[128X[104X
    [4X[28X[128X[104X
    [4X[28X      [ 4626, 1 ], [ 4629, 1 ] ] ][128X[104X
  [4X[32X[104X
  
  
  [1X3.2 [33X[0;0YClique Graphs[133X[101X
  
  [33X[0;0YWhenever  we  have a graph [22XG[122X, we can compute its clique graph [22XK(G)[122X, which is
  the  intersection  graph  of  the  cliques  of [22XG[122X. Much work has been done on
  clique  graphs  [29][24][20] and they have even been applied to Loop Quantum
  Gravity  [26][25][27].  It  is know that deciding whether a given graph is a
  clique graph ([22XGâ‰… K(H)[122X for some [22XH[122X) is NP-complete [1].[133X
  
  [33X[0;0YComputing  the  clique  graph  of  a  graph  is  clearly an exponential time
  operation  in  the worst case as the maximum number of cliques of a graph of
  order [22Xn[122X is [23X\alpha\times 3^{\frac{n-\alpha}{3}}= \Theta(3^{\frac{n}{3}})[123X [21]
  (here  [22XÎ±[122X it taken such that [22XÎ± âˆˆ {2,3,4}[122X and [22Xnâ‰¡ Î±[122X mod 3). However, very often
  the  number  of cliques in a graph is much smaller; the following experiment
  shows that the number of cliques of a graph on 50 vertices is likely between
  700 and 1300 instead of the maximum possible which is [22X2Ã—3^16=86093442[122X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XGraphAttributeStatistics(50,1/2,NumberOfCliques);[127X[104X
    [4X[28X[ [ 756, 1 ], [ 762, 1 ], [ 770, 1 ], [ 795, 1 ], [ 826, 2 ], [128X[104X
    [4X[28X  [ 832, 1 ], [ 834, 1 ], [ 835, 1 ], [ 856, 1 ], [ 860, 1 ], [128X[104X
    [4X[28X  [ 861, 1 ], [ 867, 2 ], [ 870, 1 ], [ 871, 2 ], [ 872, 1 ], [128X[104X
    [4X[28X  [ 886, 1 ], [ 887, 1 ], [ 891, 1 ], [ 896, 1 ], [ 897, 2 ], [128X[104X
    [4X[28X  [ 898, 1 ], [ 905, 1 ], [ 911, 1 ], [ 916, 2 ], [ 920, 2 ], [128X[104X
    [4X[28X  [ 923, 2 ], [ 934, 1 ], [ 938, 1 ], [ 940, 1 ], [ 942, 1 ], [128X[104X
    [4X[28X  [ 943, 1 ], [ 944, 1 ], [ 949, 1 ], [ 953, 1 ], [ 963, 1 ], [128X[104X
    [4X[28X  [ 965, 1 ], [ 966, 1 ], [ 967, 2 ], [ 970, 1 ], [ 971, 1 ], [128X[104X
    [4X[28X  [ 972, 1 ], [ 973, 2 ], [ 975, 1 ], [ 978, 1 ], [ 985, 1 ], [128X[104X
    [4X[28X  [ 986, 1 ], [ 988, 1 ], [ 993, 1 ], [ 994, 2 ], [ 997, 1 ], [128X[104X
    [4X[28X  [ 998, 1 ], [ 999, 2 ], [ 1002, 1 ], [ 1008, 1 ], [ 1015, 1 ], [128X[104X
    [4X[28X  [ 1020, 2 ], [ 1022, 1 ], [ 1025, 1 ], [ 1026, 1 ], [ 1028, 1 ], [128X[104X
    [4X[28X  [ 1029, 1 ], [ 1034, 1 ], [ 1047, 1 ], [ 1049, 1 ], [ 1054, 1 ], [128X[104X
    [4X[28X  [ 1062, 1 ], [ 1067, 1 ], [ 1069, 1 ], [ 1071, 1 ], [ 1075, 1 ], [128X[104X
    [4X[28X  [ 1077, 1 ], [ 1087, 1 ], [ 1088, 1 ], [ 1097, 1 ], [ 1098, 1 ], [128X[104X
    [4X[28X  [ 1102, 1 ], [ 1135, 1 ], [ 1139, 1 ], [ 1154, 1 ], [ 1159, 2 ], [128X[104X
    [4X[28X  [ 1165, 1 ], [ 1187, 1 ], [ 1191, 1 ], [ 1192, 1 ], [ 1203, 1 ], [128X[104X
    [4X[28X  [ 1217, 1 ], [ 1236, 1 ] ][128X[104X
    [4X[25Xgap>[125X [27X2*3^16;[127X[104X
    [4X[28X86093442[128X[104X
  [4X[32X[104X
  
  [33X[0;0YTherefore,  we  can  often  compute  cliques  and clique graphs [13Xin practice[113X,
  despite  the  worst case exponential time. Also, [10XCliqueGraph[110X is an attribute
  of  graphs  (as  most  operations  in  [5XYAGS[105X) and hence, the result is stored
  within the graph in order to prevent unnecessary recalculation:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=RandomGraph(80);;     [127X[104X
    [4X[25Xgap>[125X [27Xkg:=CliqueGraph(g);;time;[127X[104X
    [4X[28X26499[128X[104X
    [4X[25Xgap>[125X [27Xkg2:=CliqueGraph(g);;time;[127X[104X
    [4X[28X0[128X[104X
    [4X[25Xgap>[125X [27Xkg2=kg;[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YNote  that  the  last  line  in  the  previous  example  is  [13Xnot[113X testing for
  isomorphism,  it  only  tests  whether both adjacency matrices are equal. It
  remains  possible,  however,  that  the graph at hand is one of those with a
  huge  number  of  cliques.  We can limit the maximum number of cliques to be
  computed  in  [10XCliques[110X  and  [10XCliqueGraph[110X  using  the optional extra parameter
  [3XmaxNumCli[103X:  With  this  extra parameter, the computation is aborted when the
  number of computed cliques reaches [3XmaxNumCli[103X.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=OctahedralGraph(3);; [127X[104X
    [4X[25Xgap>[125X [27XCliqueGraph(g,1000); [127X[104X
    [4X[28XGraph( rec( Category := SimpleGraphs, Order := 8, Size := [128X[104X
    [4X[28X24, Adjacencies := [ [ 2, 3, 4, 5, 6, 7 ], [ 1, 3, 4, 5, 6, 8 ], [128X[104X
    [4X[28X  [ 1, 2, 4, 5, 7, 8 ], [ 1, 2, 3, 6, 7, 8 ], [ 1, 2, 3, 6, 7, 8 ], [128X[104X
    [4X[28X  [ 1, 2, 4, 5, 7, 8 ], [ 1, 3, 4, 5, 6, 8 ], [ 2, 3, 4, 5, 6, 7 ] [128X[104X
    [4X[28X ] ) )[128X[104X
    [4X[25Xgap>[125X [27Xg:=OctahedralGraph(30);; #this has 2^30=1073741824 cliques.[127X[104X
    [4X[25Xgap>[125X [27XCliqueGraph(g,1000);                            [127X[104X
    [4X[28Xfail[128X[104X
  [4X[32X[104X
  
  [33X[0;0YAlternatively  we  can  use  the [10XInfoLevel[110X mechanism ([14XB.24-3[114X) to be informed
  about  the  progress  of  clique-related operations in [5XYAGS[105X. This way we can
  abort  the  calculation  (by  typing [10XCtr-C[110X) in case we see that it will take
  eons to finish.[133X
  
  [33X[0;0YIn  [5XYAGS[105X the vertices of a graph are always [10X[1, 2, ..., Order(G)][110X, but often
  they  also  have some [13Xnames[113X. This names depend on the way in which the graph
  is  constructed and reflect the origin of the graph. We can get the names of
  the  vertices  by  using [2XVertexNames[102X ([14XB.22-3[114X). In the case of clique graphs,
  the vertex names are the corresponding cliques of the original graph.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=SunGraph(4);          [127X[104X
    [4X[28XGraph( rec( Category := SimpleGraphs, Order := 8, Size := [128X[104X
    [4X[28X14, Adjacencies := [ [ 2, 8 ], [ 1, 3, 4, 6, 8 ], [ 2, 4 ], [128X[104X
    [4X[28X  [ 2, 3, 5, 6, 8 ], [ 4, 6 ], [ 2, 4, 5, 7, 8 ], [ 6, 8 ], [128X[104X
    [4X[28X  [ 1, 2, 4, 6, 7 ] ] ) )[128X[104X
    [4X[25Xgap>[125X [27Xkg:=CliqueGraph(g);[127X[104X
    [4X[28XGraph( rec( Category := SimpleGraphs, Order := 5, Size := [128X[104X
    [4X[28X8, Adjacencies := [ [ 2, 3, 4, 5 ], [ 1, 3, 4 ], [ 1, 2, 5 ], [128X[104X
    [4X[28X  [ 1, 2, 5 ], [ 1, 3, 4 ] ] ) )[128X[104X
    [4X[25Xgap>[125X [27XVertexNames(kg);[127X[104X
    [4X[28X[ [ 2, 4, 6, 8 ], [ 2, 3, 4 ], [ 1, 2, 8 ], [ 4, 5, 6 ], [ 6, 7, 8 ] ][128X[104X
    [4X[25Xgap>[125X [27XCliques(g);[127X[104X
    [4X[28X[ [ 2, 4, 6, 8 ], [ 2, 3, 4 ], [ 1, 2, 8 ], [ 4, 5, 6 ], [ 6, 7, 8 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YHence, in the previous example, vertex 1 of [10Xkg[110X is (the one corresponding to)
  the clique [10X[ 2, 4, 6, 8 ][110X of [10Xg[110X, and vertex 2 is [10X[ 2, 3, 4 ][110X etc.[133X
  
  
  [1X3.3 [33X[0;0YBasements and Iterated Clique Graphs[133X[101X
  
  [33X[0;0YIterated  clique graphs are obtained by applying the clique operator several
  times.  As  before,  we  may  wonder which vertices of [22XK^3(g)[122X constitute the
  clique  corresponding to some vertex of [22XK^4(g)[122X and this can be settled using
  [10XVertexNames[110X  as  explained in Section [14X3.2[114X. But what if we want to know which
  vertices  of  [22Xg[122X  constitute  some vertex of [22XK^4(g)[122X? This could be done using
  [10XVertexNames[110X  at  level  [22XK^4(g)[122X  and  then  transforming each of the obtained
  vertices  (in  [22XK^3(g)[122X)  using  [10XVertexNames[110X  of  [22XK^3(g)[122X and so on... but [5XYAGS[105X
  already  has an operation that does exactly that. The [13Xbasement[113X of a vertex [22Xx[122X
  of  an  iterated  clique graph [22XK^n(g)[122X with respect to some previous iterated
  clique graph [22XK^m(g)[122X (with [22Xmâ‰¤ n[122X) is, roughly speaking, the set of vertices of
  [22XK^m(g)[122X  that constitute the vertex [22Xx[122X, that is, the set of vertices of [22XK^m(g)[122X
  which  are  needed  for  [22Xx[122X  to  exist  (see  [2XBasement[102X  ([14XB.2-3[114X)  for a formal
  definition).[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XK:=CliqueGraph;[127X[104X
    [4X[28X<Attribute "CliqueGraph">[128X[104X
    [4X[25Xgap>[125X [27Xg:=Icosahedron;;Order(g); [127X[104X
    [4X[28X12[128X[104X
    [4X[25Xgap>[125X [27Xkg:=K(g);;Order(kg);          [127X[104X
    [4X[28X20[128X[104X
    [4X[25Xgap>[125X [27Xk2g:=K(kg);;Order(k2g);[127X[104X
    [4X[28X32[128X[104X
    [4X[25Xgap>[125X [27Xk3g:=K(k2g);;Order(k3g);[127X[104X
    [4X[28X92[128X[104X
    [4X[25Xgap>[125X [27Xk4g:=K(k3g);;Order(k4g);[127X[104X
    [4X[28X472[128X[104X
    [4X[25Xgap>[125X [27XVertexNames(kg)[1];VertexNames(kg)[3];  [127X[104X
    [4X[28X[ 1, 2, 3 ][128X[104X
    [4X[28X[ 1, 3, 4 ][128X[104X
    [4X[25Xgap>[125X [27XBasement(g,kg,1);Basement(g,kg,3);        [127X[104X
    [4X[28X[ 1, 2, 3 ][128X[104X
    [4X[28X[ 1, 3, 4 ][128X[104X
    [4X[25Xgap>[125X [27XVertexNames(k4g)[2];VertexNames(k4g)[9];[127X[104X
    [4X[28X[ 1, 2, 55, 72, 73, 74, 80, 81, 82, 83, 84, 85, 88, 89, 90 ][128X[104X
    [4X[28X[ 1, 2, 3, 4, 10, 16, 81, 82, 85, 87, 88, 89 ][128X[104X
    [4X[25Xgap>[125X [27XBasement(k3g,k4g,2);Basement(k3g,k4g,9);[127X[104X
    [4X[28X[ 1, 2, 55, 72, 73, 74, 80, 81, 82, 83, 84, 85, 88, 89, 90 ][128X[104X
    [4X[28X[ 1, 2, 3, 4, 10, 16, 81, 82, 85, 87, 88, 89 ][128X[104X
    [4X[25Xgap>[125X [27XBasement(k2g,k4g,9);[127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 6, 7, 17, 19, 24, 25, 27, 28, 29, 30, 31 ][128X[104X
    [4X[25Xgap>[125X [27XBasement(kg,k4g,9); [127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 ][128X[104X
    [4X[25Xgap>[125X [27XBasement(g,k4g,9); [127X[104X
    [4X[28X[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YBasements  where introduced (with a different name) in [3] and used again in
  [23].  They  have  been  useful to study distances and diameters on iterated
  clique graphs. They are also useful when dealing with stars and neckties.[133X
  
  
  [1X3.4 [33X[0;0YStars and Neckties[133X[101X
  
  [33X[0;0YStars  and  neckties  are  useful in understanding the structure of iterated
  clique graphs.[133X
  
  [33X[0;0YLet  [22XG[122X be a graph and [22Xxâˆˆ G[122X. Let us define [22Xx^*:={qâˆˆ K(G) : xâˆˆ q}[122X. We say that
  [22Xx^*[122X  is  the [13Xstar[113X of [22Xx[122X. Observe that [22Xx^*[122X is (induces) a complete subgraph of
  [22XK(G)[122X,  and  may  or  may  not  be a clique of [22XK(G)[122X (i.e. a vertex of [22XK^2(G)[122X)
  depending on whether the star of [22Xx[122X is a [13Xmaximal[113X complete subgraph or not.[133X
  
  [33X[0;0YOn  the  other  hand, a vertex in [22XK^2(G)[122X is of the form [22XQ:={q_1,q_2,...,q_r}[122X
  where  each  [22Xq_i[122X  is a clique of [22XG[122X (i.e. a vertex of [22XK(G)[122X). We say that such
  [13Xclique  of cliques[113X [22XQ[122X is [13Xa star[113X if there is some vertex [22Xxâˆˆ G[122X such that [22Xxâˆˆ q_i[122X
  for  all  [22Xq_iâˆˆ  Q[122X; equivalently [22XQ[122X is a star if the total intersection of its
  cliques  is  non-empty (i.e. [22Xâˆ© Q â‰  âˆ…[122X). When [22XQ[122X is not a star (i.e. when [22Xâˆ© Q =
  âˆ…[122X), we say it is a [13Xnecktie[113X. It is easy to show that a clique of cliques [22XQ[122X is
  a  star  if and only if its basement at [22XG[122X is exactly the closed neighborhood
  of a vertex [22XN[x][122X.[133X
  
  [33X[0;0YClearly,  a  star  is  also the star of some vertex and any star of a vertex
  which  is a clique of cliques is a star. On the other hand, if the star of a
  vertex [22Xx^*[122X is not a clique of cliques, it is surely contained in some clique
  of  cliques  [22XQâˆˆ  K^2(G)[122X. If for each vertex [22Xx[122X we pick such a fixed clique of
  cliques [22X*(x):=Qâˆˆ K^2(G)[122X with [22Xx^*âŠ† Q[122X, we get the star morphism [22X*:Gâ†’ K^2(G)[122X.[133X
  
  [33X[0;0YA very remarkable feature of the second iterated clique graph [22XK^2(G)[122X of [22XG[122X is
  that  the  star morphism is often injective and even an isomorphism onto its
  image.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=Icosahedron;;                                 [127X[104X
    [4X[25Xgap>[125X [27Xkg:=K(g);;k2g:=K(kg);;[127X[104X
    [4X[25Xgap>[125X [27XClosedNeighborhood:=function(g,x)[127X[104X
    [4X[25X>[125X [27Xreturn Union(Adjacency(g,x),[x]); end;       [127X[104X
    [4X[28Xfunction( g, x ) ... end[128X[104X
    [4X[25Xgap>[125X [27XclosNeighs:=List(Vertices(g),x->ClosedNeighborhood(g,x)); [127X[104X
    [4X[28X[ [ 1 .. 6 ], [ 1, 2, 3, 6, 9, 10 ], [ 1, 2, 3, 4, 10, 11 ], [128X[104X
    [4X[28X  [ 1, 3, 4, 5, 7, 11 ], [ 1, 4, 5, 6, 7, 8 ], [ 1, 2, 5, 6, 8, 9 ], [128X[104X
    [4X[28X  [ 4, 5, 7, 8, 11, 12 ], [ 5, 6, 7, 8, 9, 12 ], [128X[104X
    [4X[28X  [ 2, 6, 8, 9, 10, 12 ], [ 2, 3, 9, 10, 11, 12 ], [128X[104X
    [4X[28X  [ 3, 4, 7, 10, 11, 12 ], [ 7 .. 12 ] ][128X[104X
    [4X[25Xgap>[125X [27Xstars:=Filtered(Vertices(k2g),[127X[104X
    [4X[25X>[125X [27XQ->Basement(g,k2g,Q) in closNeighs); [127X[104X
    [4X[28X[ 1, 3, 5, 8, 10, 12, 15, 18, 21, 24, 27, 30 ][128X[104X
    [4X[25Xgap>[125X [27Xh:=InducedSubgraph(k2g,stars);;[127X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(g,h);[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YHence  [22XK^2(G)[122X  is  the union of two subgraphs (with some extra edges between
  them):  One  composed  entirely  of stars and the other composed entirely of
  neckties.  The one composed entirely of stars is very similar to [22XG[122X and often
  even isomorphic to [22XG[122X.[133X
  
  [33X[0;0YA  graph  is [13Xclique-Helly[113X when every family of pairwise intersecting cliques
  has  a  non-empty  total intersection. Evidently, if [22XG[122X is clique-Helly, then
  every  vertex  of  [22XK^2(G)[122X  is  a  star.  Escalante  [6]  showed  that in the
  clique-Helly  case,  [22XK^2(G)[122X  is  isomorphic  to a subgraph of [22XG[122X, namely, the
  [2XParedGraph[102X  ([14XB.16-4[114X)  of [22XG[122X (which just removes dominated vertices) and hence
  the  star morphism in the clique-Helly case is an isomorphism exactly when [22XG[122X
  does not have dominated vertices.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=BoxTimesProduct(CycleGraph(4),PathGraph(4));;Order(g);[127X[104X
    [4X[28X16[128X[104X
    [4X[25Xgap>[125X [27XIsCliqueHelly(g);          [127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27Xk2g:=K(K(g));;pg:=ParedGraph(g);;Order(pg);[127X[104X
    [4X[28X8[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(k2g,pg);[127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27Xk4g:=K(K(k2g));;p2g:=ParedGraph(pg);;Order(p2g);[127X[104X
    [4X[28X4[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(k4g,p2g);                     [127X[104X
    [4X[28Xtrue[128X[104X
    [4X[25Xgap>[125X [27XDominatedVertices(k4g);[127X[104X
    [4X[28X[  ][128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(k4g,K(K(k4g)));[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  
  [1X3.5 [33X[0;0YClique Behavior[133X[101X
  
  [33X[0;0YWhen  we have a graph [22XG[122X and its iterated clique graphs [22XK(G), K^2(G), K^3(G),
  ...[122X a natural question is: Are all the graphs in the sequence non-isomorphic
  to  each other? The answer is "no" if and only if [22XK^n(G)â‰… K^m(G)[122X for some [22Xnâ‰ 
  m[122X  if  and only if there is a finite bound for the sequence of orders of the
  iterated  clique graphs [22X|K^n(G)|[122X. When this happens, we say that [22XG[122X is [13Xclique
  convergent[113X  and  otherwise, we say that it is [13Xclique divergent[113X. To determine
  the  [13Xclique  behavior[113X  of  a  graph consist in deciding whether it is clique
  convergent  or  clique  divergent.  It is an open problem whether the clique
  behavior is algorithmically decidable or not [15] and Meidanis even asked if
  the  clique  operator  has the computing power needed to simulate any Turing
  Machine, see [7Xhttp://www.ic.unicamp.br/~meidanis/research/clique/[107X (fetched in
  2001), but that does not prevent us from trying to determine clique behavior
  for specific graphs.[133X
  
  [33X[0;0YThe  first  thing  to try when determining the clique behavior of a graph is
  simply  to iterate the clique operator on it and check for the orders, if we
  see  the  order  stabilizes,  we  have  a  candidate  where we can check for
  isomorphism.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=TimesProduct(Icosahedron,CompleteGraph(3));;Order(g);[127X[104X
    [4X[28X36[128X[104X
    [4X[25Xgap>[125X [27Xg1:=K(g);;Order(g1);                                    [127X[104X
    [4X[28X120[128X[104X
    [4X[25Xgap>[125X [27Xg2:=K(g1);;Order(g2);                                   [127X[104X
    [4X[28X156[128X[104X
    [4X[25Xgap>[125X [27Xg3:=K(g2);;Order(g3);[127X[104X
    [4X[28X120[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(g1,g3);                               [127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YOften  however,  the  orders just keep growing. But then the second thing to
  try  (or  even the first!) is to take the [2XCompletelyParedGraph[102X ([14XB.3-12[114X) of [22XG[122X
  since  it  is  known  that the clique behavior is invariant under removal of
  dominated  vertices  [8].  In  the  following example [10Xg[110X is clique convergent
  because  [10Xh[110X is so, even if a direct calculation of the iterated clique graphs
  of [10Xg[110X just ends in memory overflow.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcp7:=ComplementGraph(PathGraph(7));;       [127X[104X
    [4X[25Xgap>[125X [27Xg:=ComplementGraph(TimesProduct(cp7,cp7));;Order(g);[127X[104X
    [4X[28X49[128X[104X
    [4X[25Xgap>[125X [27Xg1:=K(g);;Order(g1);                                 [127X[104X
    [4X[28X204[128X[104X
    [4X[25Xgap>[125X [27Xg2:=K(g1);;Order(g2);[127X[104X
    [4X[28X7193[128X[104X
    [4X[25Xgap>[125X [27Xg3:=K(g2);;Order(g3);[127X[104X
    [4X[28X     --- user interrupt or recursion trap here ---[128X[104X
    [4X[26Xbrk>[126X [27Xquit;[127X[104X
    [4X[25Xgap>[125X [27Xh:=CompletelyParedGraph(g);;Order(h); [127X[104X
    [4X[28X1[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(h,K(h)); [127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIt  is even advisable construct the combined operator [22XPK[122X (compute the clique
  graph  and then take the completely pared graph) and to compute the sequence
  of  graphs  under  the iterated application of the [22XPK[122X operator: [22X(PK)^n(G)[122X is
  clique convergent (for any [22Xn[122X) if and only if [22XG[122X is clique convergent.[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=WheelGraph(4,4);;Order(g);[127X[104X
    [4X[28X17[128X[104X
    [4X[25Xgap>[125X [27Xg1:=K(g);;Order(g1);[127X[104X
    [4X[28X28[128X[104X
    [4X[25Xgap>[125X [27Xg2:=K(g1);;Order(g2);[127X[104X
    [4X[28X37[128X[104X
    [4X[25Xgap>[125X [27Xg3:=K(g2);;Order(g3);[127X[104X
    [4X[28X60[128X[104X
    [4X[25Xgap>[125X [27Xg4:=K(g3);;Order(g4);[127X[104X
    [4X[28X185[128X[104X
    [4X[25Xgap>[125X [27Xg5:=K(g4);;Order(g5);[127X[104X
    [4X[28X2868[128X[104X
    [4X[25Xgap>[125X [27X#too many cliques to continue in this way.[127X[104X
    [4X[25Xgap>[125X [27XPK:=function(g) return CompletelyParedGraph(K(g)); end;[127X[104X
    [4X[28Xfunction( g ) ... end[128X[104X
    [4X[25Xgap>[125X [27Xh1:=PK(g);;Order(h1);[127X[104X
    [4X[28X24[128X[104X
    [4X[25Xgap>[125X [27Xh2:=PK(h1);;Order(h2);[127X[104X
    [4X[28X25[128X[104X
    [4X[25Xgap>[125X [27Xh3:=PK(h2);;Order(h1);[127X[104X
    [4X[28X24[128X[104X
    [4X[25Xgap>[125X [27Xh3:=PK(h2);;Order(h3);[127X[104X
    [4X[28X16[128X[104X
    [4X[25Xgap>[125X [27Xh4:=PK(h3);;Order(h4);[127X[104X
    [4X[28X13[128X[104X
    [4X[25Xgap>[125X [27Xh5:=PK(h4);;Order(h5);[127X[104X
    [4X[28X8[128X[104X
    [4X[25Xgap>[125X [27Xh6:=PK(h5);;Order(h6);[127X[104X
    [4X[28X1[128X[104X
    [4X[25Xgap>[125X [27XIsIsomorphicGraph(h6,K(h6));[127X[104X
    [4X[28Xtrue[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIf  a  graph  is  clique convergent, it must also be convergent under the [22XPK[122X
  operator;  It  is  an open problem to determine whether the opposite is also
  true.[133X
  
  [33X[0;0YIf  [22XG[122X  is  clique  convergent,  then  in  principle we can determine that by
  computer (although there are sometimes insufficient memory or time) but that
  is  not  so  for  clique divergent graphs. Determining clique divergence for
  graphs  can be quite challenging and there is even a graph on eight vertices
  (the  [10XSnubDisphenoid[110X)  which seems to be divergent but nobody has a proof of
  it yet [17].[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=SnubDisphenoid; [127X[104X
    [4X[28XGraph( rec( Category := SimpleGraphs, Order := 8, Size := [128X[104X
    [4X[28X18, Adjacencies := [ [ 2, 3, 4, 5, 8 ], [ 1, 3, 6, 7, 8 ], [128X[104X
    [4X[28X  [ 1, 2, 4, 6 ], [ 1, 3, 5, 6 ], [ 1, 4, 6, 7, 8 ], [128X[104X
    [4X[28X  [ 2, 3, 4, 5, 7 ], [ 2, 5, 6, 8 ], [ 1, 2, 5, 7 ] ] ) )[128X[104X
    [4X[25Xgap>[125X [27Xg1:=K(g);;Order(g1);[127X[104X
    [4X[28X12[128X[104X
    [4X[25Xgap>[125X [27Xg2:=K(g1);;Order(g2);[127X[104X
    [4X[28X20[128X[104X
    [4X[25Xgap>[125X [27Xg3:=K(g2);;Order(g3);[127X[104X
    [4X[28X56[128X[104X
    [4X[25Xgap>[125X [27Xg4:=K(g3);;Order(g4);[127X[104X
    [4X[28X1076[128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  fifth  iterated  clique graphs of the [10XSnubDisphenoid[110X has at least [22X7.37Ã—
  10^9[122X  vertices,  but  it  is estimated that the number is more likely around
  [22X10^22[122X.[133X
  
  [33X[0;0YHow  to  proceed  then? Well there are many studied families of graphs whose
  clique  behavior  have  been  settled  (including:  the  octahedral  graphs,
  cographs,  regular  locally  cyclic  graphs  (like  the  Icosahedron and the
  locally  [22XC_6[122X  graphs),  some circulants, clockworkgraphs, some comparability
  graphs, locally colorable graphs) and some techniques that may be applicable
  (including:   retractions,   covering  maps,  expansivity,  rank-divergence,
  dismantlings, local cutpoints).[133X
  
  [33X[0;0YTwo of these techniques have been successful more often than others:[133X
  
  [33X[0;0Y(1)  If  your  graph [22XG[122X has a non-trivial automorphism [22Xf:Gâ†’ G[122X that sends each
  vertex  outside of its closed neighborhood ([22Xf(x)not\in N[x][122X), then there are
  chances that you can apply the rank-divergence techniques [17][18].[133X
  
  [33X[0;0Y(2) If your graph [22XG[122X is more like a random graph, then there are good chances
  that  it  has  a  retraction  to  a [22Xd[122X-dimensional octahedron with at least 6
  vertices,  which implies the divergence of [22XG[122X [22]. In our experience, a good
  way  to  look  up for such a retraction is to find the cliques of [22XG[122X and then
  try to see if any of the cliques extends in [22XG[122X to an induced octahedral graph
  ([2XOctahedralGraph[102X  ([14XB.15-1[114X))  of  at  least  6  vertices. The existence of an
  induced  octahedral  subgraph  with  one of its faces being a clique of [22XG[122X is
  sufficient  to  prove the existence of a retraction from [22XG[122X to the octahedral
  subgraph [11][19].[133X
  
  [33X[0;0YWe  plan  to incorporate soon an operation that applies the known techniques
  for  clique  divergence  and convergence to a given graph in order to try to
  determine its clique behavior.[133X
  
