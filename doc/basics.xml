<Chapter Label="basics">
  <Heading>Getting Started</Heading>

  <Section Label="whatisyags">
    <Heading>What is &YAGS;?</Heading>

    <P/>&YAGS; - <E>Yet Another Graph System</E> (also <E>Yttrium
    Aluminium GarnetS</E><Index>Yttrium Aluminium GarnetS</Index>) is
    a &GAP; package for dealing with graphs, in the sense of Graph
    Theory (not bar graphs, pie charts nor graphs of functions).
    Hence our graphs are ordered pairs <M>G=(V,E)</M>, where <M>V</M>
    is a finite set of vertices and <M>E</M> is a finite set of edges
    which are (ordered or unordered) pairs of vertices.

    <P/>&YAGS; was designed to be useful for research on graphs theory
    and clique graphs.  It is a very functional, full-featured system;
    a system adequate for rapid prototyping of algorithms; and it is a
    quick, easy-to-use way, for testing the rapidly changing working
    conjectures which are typical of the research process.

    <P/>&YAGS; offers an ample set of functions (Appendix <Ref
    Appendix="allalpha"/>); a graph-drawing subsystem (<Ref
    Func="Draw"/>); many methods for dealing with graph homomorphism
    (Chapter <Ref Chap="morphismsofgraphs"/>); an Object-Oriented
    approach that simplifies the task of working with several
    different graph categories (Chapter <Ref
    Chap="graphcategories"/>); and a generic backtracking subsystem
    useful to solve many combinatorial problems easily (Chapter <Ref
    Chap="backtracking"/>).
    
  </Section>
  <Section Label="installingyagsnow">
    <Heading>Installing &YAGS; </Heading>

    <P/>If you are fond of <F>git</F> and you already installed &GAP;,
    then you could clone our repository as usual:

<P/>
<Log>
git clone http://github.com/yags/yags.git GAP-DIR/pkg/yags
</Log>

    <P/> Here we assume that <F>GAP-DIR</F> is any of your &GAP;'s Root Paths:
    <Example>
gap> GAPInfo.RootPaths;
[ "/home/joe/.gap/", "/opt/gap-4.14.0/local/", "/opt/gap-4.14.0/" ]
    </Example>

    <P/>Otherwise, you may follow these installation instructions:

    <Enum>
    <Item>Install &GAP; following the instructions at
    <URL>http://www.gap-system.org/</URL>. </Item>

    <Item>Obtain &YAGS; from its repository here
    <URL>http://xamanek.izt.uam.mx/yags/yags.zip</URL> or here
    <URL>https://github.com/yags/yags/archive/v0.0.6.zip</URL>.</Item>

    <Item>Unpack &YAGS;: the contents of the zip file should go under
    <File>GAP-DIR/pkg/yags/</File>. Here, we assume that
    <F>GAP-DIR</F> is any of your &GAP;'s Root Paths:
    <Example>
gap> GAPInfo.RootPaths;
[ "/home/joe/.gap/", "/opt/gap-4.14.0/local/", "/opt/gap-4.14.0/" ]
    </Example>

    <P/>Assuming those are your &GAP;'s Root Paths, a valid directory for &YAGS; 
    could be <File>"/home/joe/.gap/pkg/yags"</File>
    </Item>

    <Item>Test &YAGS; by running &GAP;, loading &YAGS; and executing a
    few basic commands in a terminal:
    
<P/>
<Log>
> gap
   --- some GAP info here ---
gap> LoadPackage("yags");
Loading  YAGS - Yet Another Graph System, Version 0.0.6.
Copyright (C) 2025 by the YAGS authors; for details type: ?yags:authors
This is free software under GPLv3; for details type: ?yags:copyright 
true
gap> CliqueNumber(Icosahedron);NumberOfCliques(Icosahedron);
3
20
gap> Draw(Icosahedron);
#I Draw: Opening new window for drawing.
#I Draw: Type 'H' on the new window to display help menu.
</Log>

The Draw command opens a graphical window displaying the corresponding graph. 
See <Ref Func="Draw"/> for details.
<Alt Only="LaTeX">
\begin{center}
  \noindent\includegraphics[width=0.4\textwidth]{draw_example.png}
\end{center}
  </Alt>
</Item>

    <Item> (Optional) Make us happier by sending us a brief
    installation notification to <Email>yags@xamanek.izt.uam.mx</Email>
    and subscribing to &YAGS;'s distribution list:
    <URL>http://xamanek.izt.uam.mx/yagsnews/</URL>
    </Item>
    </Enum>
    
    <P/>Did it work? Congratulations! Otherwise, consider the following
    troubleshooting issues:

    <P/><List>
      <Item><B>Is </B>&GAP;<B> working?</B><Br/>
      Make sure it is. Follow carefully &GAP;'s installation and troubleshooting
      procedures. </Item>
      
      <Item><B>Is the installation directory correct?</B><Br/> The
      &GAP;'s <E>installation directory</E>, <F>GAP-DIR</F>, <Index
      Key="GAP-DIR"><F>GAP-DIR</F></Index> <Index Key="GAP's
      installation directory">&GAP;'s installation directory</Index>
      is typically something like <F>/opt/gap-4.14.0/</F>.  Then, the
      full path for &YAGS;'s info file <F>PackageInfo.g</F> should be
      <F>/opt/gap-4.14.0/pkg/yags/PackageInfo.g</F>. You may ask &GAP;
      for the valid <F>GAP-DIR</F> directories with the command <F>GAPInfo.RootPaths;</F> 
      within a &GAP; session.
      </Item>

    <Item><B>Do you have Java Installed?</B><Br/> 
    Java runtime environment version 8 or latter is required for the drawing
    subsystem.  Most systems have Java already installed. You can
    verify your current version of Java with the command: 
    <F>java --version</F>, and install Java using: 
    <F>sudo apt install default-jre</F> on Debian-based systems (such as Ubuntu).
    </Item> 


      <Item><B>Are you using </B><Package>GRAPE</Package><B>?</B><Br/>
      <Package>GRAPE</Package> and &YAGS; are incompatible: 
      they can not be loaded at the same time. If you had an
      initialization file that loads <Package>GRAPE</Package>
      automatically, you should disable it in order to use
      &YAGS;. Alternatively, the command <F>gap -r</F> starts gap
      disabling any user-specific configuration files.
      </Item>
    </List>

  </Section>
  <!-- Section Label="installingyags">
    <Heading>Installing &YAGS; with more Details</Heading>

  <P/>If the previous section was too technical for you, here we do the
  same at a slower pace.
  
  <P/>First, there are some differences in the installation procedure
  depending on your operating system so we divided this section into
  several subsections to cover the most common cases.  If your operating
  system is not covered here, we do not know yet how to install &YAGS;
  on your system, but we welcome your input on the issue. Otherwise just
  jump straight to the subsection describing the installation procedure
  for your operating system.

  <Subsection Label="installonwindows"> <Heading>Installing &YAGS; on MS Windows</Heading>
  <P/>*** installing gap.
  <P/>*** installation directory vs working directory.
  <P/>*** yags: get, unpack, move. 
  <P/>*** global versus local installations
  <P/>*** yags vs grape clashes.
  </Subsection>
  <Subsection Label="installonmac"> <Heading>Installing &YAGS; on Mac OS X</Heading>
  <P/>*** installing gap.
  <P/>*** installation directory vs working directory.
  <P/>*** yags: get, unpack, move. 
  <P/>*** global versus local installations.
  <P/>*** yags vs grape clashes.
  </Subsection>
  <Subsection Label="installonunix"> <Heading>Installing &YAGS; on GNU/Linux</Heading>
  <P/>*** installing gap.
  <P/>*** installation directory vs working directory.
  <P/>*** yags: get, unpack, move. 
  <P/>*** global versus local installations.
  <P/>*** yags vs grape clashes.
  </Subsection>

  </Section -->
  
  <Section Label="agentletutorial">
    <Heading>A Gentle Tutorial</Heading>

<P/> This tutorial assumes that you already installed &GAP; and &YAGS;;
and that you have some basic understanding of &GAP;: user interface, the
read-eval-print loop, arithmetic operations, and lists. It is strongly
recommended that you have some <E>working directory</E>,
<F>WORKING-DIR</F>, <Index>working directory</Index>
<Index>WORKING-DIR</Index> different from your &GAP;'s and &YAGS;'s
installation directories. For instance, if your home directory is
<F>/home/joe/</F> your working directory could be
<F>/home/joe/Yags/</F>.  Then you should open a terminal, move to your
working directory, start &GAP; and then, load &YAGS;:

<P/><Log>
/home/joe> cd Yags
/home/joe/Yags> gap
   --- some GAP info here ---
gap> LoadPackage("yags");
Loading  YAGS - Yet Another Graph System, Version 0.0.6.
Copyright (C) 2025 by the YAGS authors; for details type: ?yags:authors
This is free software under GPLv3; for details type: ?yags:copyright 
true
gap> 
</Log>

<P/>The exact appearance of your system prompt (<F>/home/joe></F> and
<F>/home/joe/Yags/></F> in the example) may be different depending on
your system, but the commands '<F>cd Yags</F>' and '<F>gap</F>' are
actually the same in all supported systems (assuming your working
directory exists and is named '<F>Yags</F>'). From there (starting
with the command '<F>LoadPackage("yags");</F>') everything happens
within &GAP; and hence it is system-independent.

<P/>Now we want to define some graph. Say we have the list of edges of
the desired graph:

<Display Mode="M">
  \{ \{ 1, 2 \}, \{ 2, 3 \}, \{ 3, 4 \}, \{ 4, 1 \}, \{ 1, 5 \}, \{ 5, 4 \} \}
</Display>

<P/>We can put those edges in a list and then construct the graph:

<P/>
<Example>
gap> list:=[[1,2],[2,3],[3,4],[4,1],[1,5],[5,4]];
[ [ 1, 2 ], [ 2, 3 ], [ 3, 4 ], [ 4, 1 ], [ 1, 5 ], [ 5, 4 ] ]
gap> g:=GraphByEdges(list);                      
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
6, Adjacencies := [ [ 2, 4, 5 ], [ 1, 3 ], [ 2, 4 ], [ 1, 3, 5 ], 
  [ 1, 4 ] ] ) )
</Example>

<P/>Note that &GAP; uses brackets ('<F>[</F>' and '<F>]</F>')
instead of braces ('<F>{</F>' and '<F>}</F>') to represent sets and
lists (actually, in &GAP; a set is simply an ordered list). Note also
that in &GAP; '<C>list</C>' and '<C>List</C>' are two different things
and you can not use the latter since it is a reserved word of &GAP;. In
general, it is better for you to use lowercase names for your variables,
to avoid name clashes, since all functions in &GAP; and &YAGS; start
with an uppercase letter.

<P/>The result in the previous example says that it is a graph, and a
<E>simple graph</E>.  By default all graphs in &YAGS; are simple (no
loops, no arrows, no parallel edges, only plain undirected edges), in
Chapter <Ref Label="graphcategories"/> we explain how to work with other
types of graphs, like digraphs, loopless graphs, and graphs that may
have loops (but no parallel edges are supported in &YAGS; at all). In
this gentle tutorial all our graphs are simple.

<P/>The result also says, that the just constructed graph <C>g</C>
have <C>5</C> vertices and <C>6</C> edges. The reported list of
adjacencies means that the vertex <C>1</C> is adjacent (connected by
an edge) to <C>2</C>, <C>4</C> and <C>5</C>, that the vertex <C>2</C>
is adjacent to <C>1</C> and <C>3</C> and so on. To be sure, we can
draw our graph and check if it is the intended graph:

<P/><Log>
gap> Draw(g);
</Log>

<P/>A separate window appears with an editable drawing of the graph
(but the graph itself is not editable here). On that window, type:
'<C>D</C>' (toggle dynamics on/off), '<C>R</C>' (toggle repulsion
on/off), '<C>L</C>' (toggle labels on/off) and '<C>F</C>' (fit graph
into window) to obtain a nice drawing (the initial one is random). The
full list of keyboard commands for the <C>Draw</C> window is displayed
when typing '<C>H</C>' (toggle help message). Besides these keyboard
commands, you can use your mouse in obvious ways to edit the drawing.

<P/>To quit, type '<C>S</C>'. The drawing is stored within the graph
<C>g</C> and remembered by &YAGS; in case you want to draw the graph
again.

<P/>If you are new to &GAP;, it may be worth mentioning that
you need not remember or type all the full names of every &YAGS;
operation: &GAP; supports command completion. For instance, if you
type <F>Path</F> and then hit the <F>&lt;TAB></F> key, &GAP;
automatically completes the prefix to the unique command that completes it,
namely: <F>PathGraph</F>. If, on the other hand, the
prefix has several possible completions, then &GAP; simply beeps, but
a second <F>&lt;TAB></F> makes &GAP; respond with a list of possible
completions, so you can then type some additional keys and perhaps type
<F>&lt;TAB></F> again, and so on.

<P/><Log>
gap> GraphBy&lt;TAB>&lt;TAB>
    GraphByAdjMatrix
    GraphByAdjacencies
    GraphByCompleteCover
    GraphByEdges
    GraphByRelation
    GraphByWalks
gap> GraphBy
</Log>

<P/>Also, the <F>&lt;UP></F> and <F>&lt;DOWN></F> keys are useful to
bring back (and perhaps edit) some commands typed earlier in your
&GAP; session. As with any command in &GAP;/&YAGS;, in case of doubt, you can
always access the online help by typing:

<P/><Log>
gap> ?yags:draw
Help: several entries match this topic - type ?2 to get match [2]

[1] yags: Draw
[2] yags: Drawing
gap> ?1
  B.1-55 Draw
  
  ‣ Draw( G ) ───────────────────────────────────────────── operation
  
  Takes a graph G and makes a drawing of it in a separate window. The
  user  can  then  view  and  modify the drawing and finally save the
  vertex coordinates of the drawing into the graph G.
  
  --- many more lines here ---
</Log>

<P/>Here, '<C>?</C>' specifies that we want help; '<C>yags:</C>'
specifies on which manual book we want to search (&YAGS;'s book in this
case) and '<C>draw</C>' specifies the topic we would like to be
informed about. As it is common, there are more than one place with
information on our topic, hence we choose among the options with
'<C>?1</C>' in the next command line. It is not necessary to specify the
book, but then you could receive many more options, in different books,
about some specific topic.

<P/>Now that we know that our graph is the one we want, we can ask &YAGS; a
lot of things about it:

<P/>
<Example>
gap> Order(g); Size(g); Diameter(g); Girth(g);
5
6
2
3
gap> NumberOfCliques(g); CliqueNumber(g);                  
4
3
gap> Adjacencies(g);Adjacency(g,4);Adjacency(g,3);
[ [ 2, 4, 5 ], [ 1, 3 ], [ 2, 4 ], [ 1, 3, 5 ], [ 1, 4 ] ]
[ 1, 3, 5 ]
[ 2, 4 ]
gap> VertexDegrees(g);VertexDegree(g,4);VertexDegree(g,3);
[ 3, 2, 2, 3, 2 ]
3
2
gap> IsDiamondFree(g);IsCompleteGraph(g);IsLoopless(g);
true
false
true
gap> Cliques(g);CompletesOfGivenOrder(g,3);
[ [ 1, 4, 5 ], [ 1, 2 ], [ 2, 3 ], [ 3, 4 ] ]
[ [ 1, 4, 5 ] ]
gap> CompletesOfGivenOrder(g,2);           
[ [ 1, 2 ], [ 1, 4 ], [ 1, 5 ], [ 2, 3 ], [ 3, 4 ], [ 4, 5 ] ]
</Example>

<P/>Note that in &YAGS; a <E>clique</E> is always <E>maximal</E>.
This is just a small sample. The full alphabetic list of &YAGS;
operations can be found in Appendix <Ref Appendix="allalpha"/>, and
grouped by topic in Appendix <Ref Appendix="alltopic"/>.  There is
also a one-page pdf file, <F>cheatsheet-yags.pdf</F>, which contains a
very useful synopsis of many of the most common &YAGS; operations. See
the next section (<Ref Sect="cheatsheet"/>) for details.

<P/>What about <E>modifying</E> our graphs<Index>modifying
graphs</Index>? Well, all graphs in &YAGS; are always immutable, which
means that, once created, we can never modify a graph. But we can create
new graphs which are variations of existing ones:

<P/>
<Example>
gap> g;
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
6, Adjacencies := [ [ 2, 4, 5 ], [ 1, 3 ], [ 2, 4 ], [ 1, 3, 5 ], 
  [ 1, 4 ] ] ) )
gap> h:=AddEdges(g,[[1,3],[2,4]]);;  
gap> g;
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
6, Adjacencies := [ [ 2, 4, 5 ], [ 1, 3 ], [ 2, 4 ], [ 1, 3, 5 ], 
  [ 1, 4 ] ] ) )
gap> h;
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
8, Adjacencies := [ [ 2, 3, 4, 5 ], [ 1, 3, 4 ], [ 1, 2, 4 ], 
  [ 1, 2, 3, 5 ], [ 1, 4 ] ] ) )
</Example>

<P/>Note that the graph <C>g</C> remains the same, but the graph
<C>h</C> has two additional edges. This is done in this way, because
in &YAGS; everything that is computed about a graph is stored within
the graph, so that we never need to compute something twice. This
saves time when computing attributes of graphs requiring CPU-intensive
algorithms (like computing cliques and clique graphs), but at the
expense of having to make a copy of the graph when we just want a
small variation of it.

<P/> There are a lot of predefined graphs (the full list can be consulted
in Appendix <Ref Sect="tfamilies"/>):

<P/>
<Example>
gap> PathGraph(5);CycleGraph(6);CompleteGraph(5); 
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
4, Adjacencies := [ [ 2 ], [ 1, 3 ], [ 2, 4 ], [ 3, 5 ], [ 4 ] ] ) )
Graph( rec( Category := SimpleGraphs, Order := 6, Size := 
6, Adjacencies := [ [ 2, 6 ], [ 1, 3 ], [ 2, 4 ], [ 3, 5 ], [ 4, 6 ], 
  [ 1, 5 ] ] ) )
Graph( rec( Category := SimpleGraphs, Order := 5, Size := 
10, Adjacencies := [ [ 2, 3, 4, 5 ], [ 1, 3, 4, 5 ], [ 1, 2, 4, 5 ], 
  [ 1, 2, 3, 5 ], [ 1, 2, 3, 4 ] ] ) )
gap> CompleteBipartiteGraph(3,3);TreeGraph([2,2,2]);
Graph( rec( Category := SimpleGraphs, Order := 6, Size := 
9, Adjacencies := [ [ 4, 5, 6 ], [ 4, 5, 6 ], [ 4, 5, 6 ], 
  [ 1, 2, 3 ], [ 1, 2, 3 ], [ 1, 2, 3 ] ] ) )
Graph( rec( Category := SimpleGraphs, Order := 15, Size := 
14, Adjacencies := [ [ 2, 3 ], [ 1, 4, 5 ], [ 1, 6, 7 ], [ 2, 8, 9 ], 
  [ 2, 10, 11 ], [ 3, 12, 13 ], [ 3, 14, 15 ], [ 4 ], [ 4 ], [ 5 ], 
  [ 5 ], [ 6 ], [ 6 ], [ 7 ], [ 7 ] ] ) )
gap> Octahedron;ParapluieGraph;
Graph( rec( Category := SimpleGraphs, Order := 6, Size := 
12, Adjacencies := [ [ 3, 4, 5, 6 ], [ 3, 4, 5, 6 ], [ 1, 2, 5, 6 ], 
  [ 1, 2, 5, 6 ], [ 1, 2, 3, 4 ], [ 1, 2, 3, 4 ] ] ) )
Graph( rec( Category := SimpleGraphs, Order := 7, Size := 
9, Adjacencies := [ [ 2 ], [ 1, 3 ], [ 2, 4, 5, 6, 7 ], [ 3, 5 ], 
  [ 3, 4, 6 ], [ 3, 5, 7 ], [ 3, 6 ] ] ) )
</Example>

<P/>We have found that <Ref Func="GraphByWalks"/> is one of the most
useful and versatile ways of specifying graphs:

<P/>
<Example>
gap> p5:=PathGraph(5);;c6:=CycleGraph(6);;w4:=WheelGraph(4);;  
gap> IsIsomorphicGraph(p5,GraphByWalks([1..5]));
true
gap> IsIsomorphicGraph(c6,GraphByWalks([1,2,3,4,5,6,1]));
true
gap> IsIsomorphicGraph(c6,GraphByWalks([1..6],[6,1]));   
true
gap> IsIsomorphicGraph(w4,GraphByWalks([1,[2,3,4,5,2]]));
true
gap> sd:=GraphByWalks([1,[2,3,4,5],6],[5,[6,7,8,1],2]);; 
gap> IsIsomorphicGraph(SnubDisphenoid,sd);
true
</Example>

<P/>&YAGS; knows about random graphs, so you can take some random
graphs and study their parameters.  Furthermore, <Ref
Func="GraphAttributeStatistics"/> can collect statistics on 100 random
graphs at a time returning the collected results of the specified
graph parameter on these graphs. <!-- RandomComment -->The following
experiments show, for instance that the values of the minimum degree
parameter are much more spread than those of the clique number or
those of the diameter.

<P/>
<Example>
gap> g:=RandomGraph(30,1/2);;
gap> MinDegree(g); CliqueNumber(g); Diameter(g);
9
6
2
gap> GraphAttributeStatistics(30,1/2,MinDegree);
[ [ 5, 1 ], [ 6, 2 ], [ 7, 6 ], [ 8, 22 ], [ 9, 30 ], [ 10, 30 ], 
  [ 11, 5 ], [ 12, 4 ] ]
gap> GraphAttributeStatistics(30,1/2,CliqueNumber);
[ [ 5, 2 ], [ 6, 70 ], [ 7, 24 ], [ 8, 4 ] ]
gap> GraphAttributeStatistics(30,1/2,Diameter);    
[ [ 2, 91 ], [ 3, 9 ] ]
</Example>

<P/>Finally, it is worth mentioning that algorithms the may take too
much time to finish report their progress using the <C>InfoLevel</C>
mechanism: Enabling and disabling progress reporting is done by
changing the <C>InfoLevel</C> of <C>YAGSInfo.InfoClass</C> to the
appropriate level. The default <C>InfoLevel</C> is 0. Some of &YAGS;
algorithms report at <C>InfoLevel</C> 1, and others at
<C>InfoLevel</C> 3.

<P/>
<Log>
gap> SetInfoLevel(YAGSInfo.InfoClass,3);           
gap> FullMonoMorphisms(PathGraph(3),CycleGraph(3));
#I [  ]
#I [ 1 ]
#I [ 1, 2 ]
#I [ 1, 3 ]
#I [ 2 ]
#I [ 2, 1 ]
#I [ 2, 3 ]
#I [ 3 ]
#I [ 3, 1 ]
#I [ 3, 2 ]
[  ]
gap> SetInfoLevel(YAGSInfo.InfoClass,0);           
gap> FullMonoMorphisms(PathGraph(3),CycleGraph(3));
[  ]
</Log> 

<P/>This way we can abort the calculation (by typing <C>Ctr-C</C>) in
case we see that it will take eons to finish. See <Ref
Var="YAGSInfo.InfoClass"/> for details.

  </Section>
  <Section Label="cheatsheet">
    <Heading>Cheatsheet</Heading>

<P/>There is a very useful two-page pdf cheatsheet with &YAGS;'s most
common functions. It can be consulted in your &YAGS; installation at
<F>YAGS-DIR/doc/cheatsheet-yags.pdf</F> or on the web at
<URL>http://xamanek.izt.uam.mx/yags/cheatsheet-yags.pdf</URL>.  Also,
the pdf version of this manual includes it in the next page and an
HTML version can be found here:
<URL>https://github.com/yags/cheatsheet/blob/master/cheatsheet-yags.org</URL>.

<Alt Only="LaTeX">
  \newpage\thispagestyle{empty}%
  \newgeometry{left=0.1cm,top=0.87cm,bottom=0.1cm,right=0.1cm}%
  \noindent\scalebox{1}{\rotatebox{90}{\includegraphics{cheat1.pdf}}}%
  \newpage\thispagestyle{empty}%
  \newgeometry{left=0.1cm,top=0.87cm,bottom=0.1cm,right=0.1cm}%
  \noindent\scalebox{1}{\rotatebox{90}{\includegraphics{cheat2.pdf}}}%
  \restoregeometry
</Alt>
  </Section>
</Chapter>
<Alt Only="LaTeX">\restoregeometry</Alt>
