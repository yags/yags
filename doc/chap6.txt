  
  [1X6 [33X[0;0YBacktracking[133X[101X
  
  [33X[0;0YBacktracking  is  an  algorithmic  technique  for [13Xsearching in combinatorial
  spaces[113X: For instance, when you need to find a particular function (morphism,
  coloring,  etc)  subject  to  some  criterion ([13Xiso[113Xmorphism, [13Xproper[113X coloring,
  etc).[133X
  
  [33X[0;0YIn  this  chapter  we  describe the technique and the facilities provided by
  [5XYAGS[105X  to  aid  in  the  rapid  prototyping  of backtracking algorithms. This
  chapter  is  written for the non-expert programmer, which is who can benefit
  the most from these facilities.[133X
  
  [33X[0;0YWhile  the  expert programmers will not have any problem designing their own
  backtracking  algorithms,  they  can  still benefit from [5XYAGS[105X's backtracking
  facilities  since  it  may  still  be  faster  to implement/test/prototype a
  backtracking  algorithm  using  [5XYAGS[105X's  facilities.  We recommend the expert
  programmer  to  go directly to [2XBacktrack[102X ([14XB.2-1[114X) where a minimal non-trivial
  example (for computing derangements) is shown.[133X
  
  [33X[0;0YThe kind of combinatorial problems that can be addressed by backtracking are
  those  that  can  be  represented by a decision tree: those where we have to
  make  a  succession  of  choices  to find a solution. These include problems
  where  we  want to find: morphisms, isomorphisms, cages, colorings, cliques,
  Hamiltonian   cycles,   walks,   paths,  subgraphs,  and  much,  much  more.
  Combinatorial  problems that can be represented by a decision tree are truly
  everywhere.  [5XYAGS[105X  backtracking  facilities  are  provided  by  means of the
  operations               [10XBacktrackBag(Opts,Chk,Done,Extra)[110X               and
  [10XBacktrack(L,Opts,Chk,Done,Extra)[110X.[133X
  
  
  [1X6.1 [33X[0;0YSimplest Examples: Using [10XOpts[110X[101X[1X and [10XDone[110X[101X[1X[133X[101X
  
  [33X[0;0YAs  a  concrete  example consider graph colorings: You have a set of colors,
  say  [10X["red",  "green"][110X  and a graph, say [10Xg:=PathGraph(3)[110X, whose vertices are
  [10X[1,  2, 3][110X. Then a [13Xcoloring[113X is a function [22Xf: {1, 2, 3} â†’ {red, green}[122X, which
  in  [5XYAGS[105X  would  be  represented by a List [10XL:=[ f(1), f(2), f(3)][110X. There are
  (obviously)   eight  of  such  colorings,  which  are  easy  to  list  using
  [10XBacktrackBag(Opts,Chk,Done,Extra)[110X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xcolors:=["red","green"];[127X[104X
    [4X[28X[ "red", "green" ][128X[104X
    [4X[25Xgap>[125X [27XBacktrackBag(colors,ReturnTrue,3,[]);[127X[104X
    [4X[28X[ [ "red", "red", "red" ], [ "red", "red", "green" ], [128X[104X
    [4X[28X  [ "red", "green", "red" ], [ "red", "green", "green" ], [128X[104X
    [4X[28X  [ "green", "red", "red" ], [ "green", "red", "green" ], [128X[104X
    [4X[28X  [ "green", "green", "red" ], [ "green", "green", "green" ] ][128X[104X
    [4X[25Xgap>[125X [27XLength(last);[127X[104X
    [4X[28X8[128X[104X
  [4X[32X[104X
  
  [33X[0;0YIn  the  previous  example,  only  two parameters of [10XBacktrackBag[110X are really
  used,  namely:  [10XOpts[110X  (which stands for [13Xoptions[113X) and [10XDone[110X; when used in this
  way,  [10XOpts[110X  is simply the codomain of the sought function and [10XDone[110X is simply
  the  size  of  the domain. When working with graph colorings it is common to
  use  numbers instead of actual colors or color names, so we could also write
  even more compactly:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X[ [ 0, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 1 ], [ 1, 0, 0 ], [128X[104X
    [4X[28X  [ 1, 0, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YSometimes  you  just  want  a  few  solutions and not the whole bag. This is
  specially  true  when the bag is too huge (which is often the case since the
  bag  tend to grow exponentially in the size of the domain). For these cases,
  we have [10XBacktrack(L,Opts,Chk,Done,Extra)[110X:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XL:=[]; [127X[104X
    [4X[28X[  ][128X[104X
    [4X[25Xgap>[125X [27XBacktrack(L,[0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X[ 0, 0, 0 ][128X[104X
    [4X[25Xgap>[125X [27XL;[127X[104X
    [4X[28X[ 0, 0, 0 ][128X[104X
    [4X[25Xgap>[125X [27XBacktrack(L,[0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X[ 0, 0, 1 ][128X[104X
    [4X[25Xgap>[125X [27XL;                                 [127X[104X
    [4X[28X[ 0, 0, 1 ][128X[104X
    [4X[25Xgap>[125X [27XL:=[1,1,0];[127X[104X
    [4X[28X[ 1, 1, 0 ][128X[104X
    [4X[25Xgap>[125X [27XBacktrack(L,[0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X[ 1, 1, 1 ][128X[104X
    [4X[25Xgap>[125X [27XL;                                 [127X[104X
    [4X[28X[ 1, 1, 1 ][128X[104X
    [4X[25Xgap>[125X [27XBacktrack(L,[0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28Xfail[128X[104X
    [4X[25Xgap>[125X [27XL;[127X[104X
    [4X[28X[ fail ][128X[104X
  [4X[32X[104X
  
  [33X[0;0Y[10XBacktrack(L,Opts,Chk,Done,Extra)[110X  returns one solution at a time and it also
  stores  the solution within [10XL[110X, so that [10XL[110X can be used as a starting point for
  the  search  of  the  next  solution.  Usually,  [10XL:=[][110X is used for the first
  search.  When Calling [10XBacktrack(L,Opts,Chk,Done,Extra)[110X, [10XL[110X may also contain a
  [13Xpartial[113X solution (i.e. a prefix of a solution like [10XL:=[ 1 ][110X or [10XL:=[ 1, 0 ][110X),
  however  [10XBacktrack[110X  will trust the user on this and it will not check that [10XL[110X
  is indeed a partial solution.[133X
  
  [33X[0;0Y[10XBacktrack[110X  returns  [10Xfail[110X  when  no  more  solutions  are  available, but for
  technical  reasons,  [10XL[110X  must  always  be a list, so [10XL:=[ fail ][110X is the final
  value of [10XL[110X.[133X
  
  [33X[0;0YNow,  so far, the graph itself have not been used and the parameters [10XChk[110X and
  [10XExtra[110X  have  not  been  explained.  Both  issues  are  addressed in the next
  section.[133X
  
  
  [1X6.2 [33X[0;0YFull Examples: Using [10XChk[110X[101X[1X and [10XExtra[110X[101X[1X[133X[101X
  
  [33X[0;0YIn Graph Theory we are usually more interested in [13Xproper colorings[113X than just
  in  colorings.  A  proper  coloring  is  a coloring in which no two adjacent
  vertices  have the same color. We can easily accommodate the new requirement
  within  our  backtracking  operations.  We are going to use [10XChk[110X to check the
  fulfillment of the condition at each step in the construction of a solution.
  Moreover,  in  order  to check the new condition we certainly need the extra
  information  contained  in the graph we are coloring. This extra information
  (the graph) is passed in the [10XExtra[110X parameter.[133X
  
  [33X[0;0YMore  generally, [10XChk[110X is a user-provided function [10XChk(L,Extra)[110X which receives
  a  partial  solution  [10XL[110X  and  some extra information [10XExtra[110X; it returns [10Xfalse[110X
  whenever  it  knows  that  [10XL[110X  can not be completed to a full solution and it
  returns   [10Xtrue[110X   otherwise.  Note  then  that  our  backtracking  operations
  internally  call  [10XChk[110X  several times during the process of constructing each
  solution:  once  each time [10XL[110X grows in length. In each call to [10XChk[110X it is safe
  to  assume  that  all  proper  prefixes  of [10XL[110X have already been verified and
  approved by [10XChk[110X.[133X
  
  [33X[0;0YIn  our  example,  [10XL[110X  contains  the color choices already made for the first
  vertices:  [10X1,  2,  ... Length(L)[110X. It is safe to assume that all but the last
  choice  are  already checked to satisfy the properness requirement. The last
  color  choice  so  far  is then the one in [10XL[Length(L)][110X and we have to check
  (within  [10XChk[110X)  if  it  also satisfy the properness requirement. We can do it
  like this:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=PathGraph(3);;                                    [127X[104X
    [4X[25Xgap>[125X [27Xchk:=function(L,g)                                   [127X[104X
    [4X[25X>[125X [27X       local x,y;                                           [127X[104X
    [4X[25X>[125X [27X       if L=[] then return true; fi;                        [127X[104X
    [4X[25X>[125X [27X       x:=Length(L);                                        [127X[104X
    [4X[25X>[125X [27X       for y in [1..x-1] do                                 [127X[104X
    [4X[25X>[125X [27X          if IsEdge(g,[x,y]) and L[x]=L[y] then[127X[104X
    [4X[25X>[125X [27X             return false;[127X[104X
    [4X[25X>[125X [27X          fi;[127X[104X
    [4X[25X>[125X [27X       od;[127X[104X
    [4X[25X>[125X [27X       return true;[127X[104X
    [4X[25X>[125X [27X   end;[127X[104X
    [4X[28Xfunction( L, g ) ... end[128X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],chk,Order(g),g);                     [127X[104X
    [4X[28X[ [ 0, 1, 0 ], [ 1, 0, 1 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YNow  we get only two solutions, as expected. We emphasize here the fact that
  [10XChk[110X  is  internally  called  by  [10XBacktrackBag[110X  each  time [10XL[110X grows in length.
  Therefore  (for  instance)  at  some  point the partial solution [10X[ 0, 0 ][110X is
  tried  and  since it is found unfeasible by [10XChk[110X is is discarded and no other
  partial  solution  with  that  prefix  is  ever  tried.  This  produces huge
  reductions  in  execution  time  as  compared  to  the  (naive)  approach of
  computing  all  the  colorings first and then filtering out those which does
  not  satisfy the properness requirement. In particular we can compute proper
  colorings for graphs where the naive approach fails:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=PathGraph(70);;[127X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],chk,Order(g),g);[127X[104X
    [4X[28X[ [ 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, [128X[104X
    [4X[28X      0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, [128X[104X
    [4X[28X      1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, [128X[104X
    [4X[28X      0, 1, 0, 1, 0, 1 ], [128X[104X
    [4X[28X  [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, [128X[104X
    [4X[28X      1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, [128X[104X
    [4X[28X      0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, [128X[104X
    [4X[28X      1, 0, 1, 0, 1, 0 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YOf  course,  we  can  now  compute proper colorings for many other graphs as
  well:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=CycleGraph(5);;                 [127X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],chk,Order(g),g);[127X[104X
    [4X[28X[  ][128X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1,2],chk,Order(g),g);[127X[104X
    [4X[28X[ [ 0, 1, 0, 1, 2 ], [ 0, 1, 0, 2, 1 ], [ 0, 1, 2, 0, 1 ], [128X[104X
    [4X[28X  [ 0, 1, 2, 0, 2 ], [ 0, 1, 2, 1, 2 ], [ 0, 2, 0, 1, 2 ], [128X[104X
    [4X[28X  [ 0, 2, 0, 2, 1 ], [ 0, 2, 1, 0, 1 ], [ 0, 2, 1, 0, 2 ], [128X[104X
    [4X[28X  [ 0, 2, 1, 2, 1 ], [ 1, 0, 1, 0, 2 ], [ 1, 0, 1, 2, 0 ], [128X[104X
    [4X[28X  [ 1, 0, 2, 0, 2 ], [ 1, 0, 2, 1, 0 ], [ 1, 0, 2, 1, 2 ], [128X[104X
    [4X[28X  [ 1, 2, 0, 1, 0 ], [ 1, 2, 0, 1, 2 ], [ 1, 2, 0, 2, 0 ], [128X[104X
    [4X[28X  [ 1, 2, 1, 0, 2 ], [ 1, 2, 1, 2, 0 ], [ 2, 0, 1, 0, 1 ], [128X[104X
    [4X[28X  [ 2, 0, 1, 2, 0 ], [ 2, 0, 1, 2, 1 ], [ 2, 0, 2, 0, 1 ], [128X[104X
    [4X[28X  [ 2, 0, 2, 1, 0 ], [ 2, 1, 0, 1, 0 ], [ 2, 1, 0, 2, 0 ], [128X[104X
    [4X[28X  [ 2, 1, 0, 2, 1 ], [ 2, 1, 2, 0, 1 ], [ 2, 1, 2, 1, 0 ] ][128X[104X
    [4X[25Xgap>[125X [27Xg:=Icosahedron;;                          [127X[104X
    [4X[25Xgap>[125X [27XBacktrack([],[0,1,2],chk,Order(g),g);[127X[104X
    [4X[28Xfail[128X[104X
    [4X[25Xgap>[125X [27XBacktrack([],[0,1,2,3],chk,Order(g),g);[127X[104X
    [4X[28X[ 0, 1, 2, 1, 2, 3, 3, 0, 2, 3, 0, 1 ][128X[104X
  [4X[32X[104X
  
  
  [1X6.3 [33X[0;0YAdvanced Examples: When [10XOpts[110X[101X[1X and [10XDone[110X[101X[1X are functions[133X[101X
  
  [33X[0;0YOur    backtracking    operations    [10XBacktrackBag(Opts,Chk,Done,Extra)[110X   and
  [10XBacktrack(L,Opts,Chk,Done,Extra)[110X  are  even more flexible that shown so far.
  In  our  previous  examples  [10XOpts[110X  was  always a list and [10XDone[110X was always an
  integer. Both can also be functions.[133X
  
  [33X[0;0YWhen  [10XOpts[110X  is  a  function, it receives [10XL[110X and [10XExtra[110X, and then [10XOpts(L,Extra)[110X
  should return the list of options available to extend the partial solution [10XL[110X
  at  that  particular stage. This way the list of options can be different at
  different  times which is useful for instance when the union of all possible
  options is too big or even unbounded.[133X
  
  [33X[0;0YWhen   [10XDone[110X  is  a  function,  it  also  receives  [10XL[110X  and  [10XExtra[110X,  and  then
  [10XDone(L,Extra)[110X  returns  [10Xtrue[110X  whenever  [10XL[110X  is a full solution and it returns
  [10Xfalse[110X  otherwise.  This  is  useful when not all the solutions have the same
  length.  Thus  the  number  [10XN[110X  we  used  to  put  in  place  of the function
  [10XDone(L,Extra)[110X  is  equivalent to the function [10XDone:=function(L,Extra) return
  Length(L) >= N; end;[110X.[133X
  
  [33X[0;0YAlso,  when  a  number  [10XN[110X  is used in place of [10XDone[110X, an implicit upper bound
  [10XLength(L)<= N[110X is added internally to [10XChk[110X, so it is [13Ximperative[113X to add such an
  explicit  bound  to  [10XChk[110X  when  a  function  is  used for [10XDone[110X otherwise the
  backtracking  algorithm will try to find longer and longer solutions without
  bound or end until the memory of the computer is exhausted.[133X
  
  [33X[0;0YAs an example, assume we want to find all the walks on 5-cycle that start at
  vertex  1  and  end  at vertex 2 with length at most 4 (at most 5 vertices).
  Then we can proceed as follows:[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27Xg:=CycleGraph(5);[127X[104X
    [4X[28XGraph( rec( Category := SimpleGraphs, Order := 5, Size := [128X[104X
    [4X[28X5, Adjacencies := [ [ 2, 5 ], [ 1, 3 ], [ 2, 4 ], [ 3, 5 ], [ 1, 4 ] [128X[104X
    [4X[28X ] ) )[128X[104X
    [4X[25Xgap>[125X [27Xopts:=function(L,g) [127X[104X
    [4X[25X>[125X [27X            if L=[] then [127X[104X
    [4X[25X>[125X [27X               return [1]; [127X[104X
    [4X[25X>[125X [27X            else [127X[104X
    [4X[25X>[125X [27X               return Adjacency(g,L[Length(L)]); [127X[104X
    [4X[25X>[125X [27X           fi; [127X[104X
    [4X[25X>[125X [27X   end;[127X[104X
    [4X[28Xfunction( L, g ) ... end[128X[104X
    [4X[25Xgap>[125X [27Xchk:=function(L,g) return Length(L)<= 5; end;[127X[104X
    [4X[28Xfunction( L, g ) ... end[128X[104X
    [4X[25Xgap>[125X [27Xdone:=function(L,g) return L[Length(L)]=2; end;[127X[104X
    [4X[28Xfunction( L, g ) ... end[128X[104X
    [4X[25Xgap>[125X [27XBacktrackBag(opts,chk,done,g);[127X[104X
    [4X[28XError, no method found! For debugging hints type ?Recovery from NoMeth\[128X[104X
    [4X[28XodFound[128X[104X
    [4X[28XError, no 1st choice method found for `[]' on 2 arguments[128X[104X
  [4X[32X[104X
  
  [33X[0;0YFinally  you  may wonder why only [13Xone[113X extra parameter [10XExtra[110X is allowed, what
  if  I  need  more  than  one?  Well,  the  parameter [10XExtra[110X may be any object
  supported  by  [5XGAP[105X;  indeed  [5XYAGS[105X  only  uses  it to pass information to the
  user-defined functions [10XOpts(L,Extra)[110X, [10XChk(L,Extra)[110X and [10XDone(L,Extra)[110X. Hence,
  if  you need pass more than one extra parameter, say two graphs [10Xg[110X and [10Xh[110X, you
  just   put  them  in  a  list  (or  record,  etc)  and  pass  the  parameter
  [10XExtra:=[g,h][110X.[133X
  
  
  [1X6.4 [33X[0;0YDebugging Backtracking Algorithms.[133X[101X
  
  [33X[0;0YSooner  or later you will need to debug a backtracking algorithm that is not
  working  as expected, or at least, you would like to know how much work your
  algorithm  has done and how much remains to be done to decide if it is worth
  waiting   for  an  answer  (since  backtracking  techniques  easily  produce
  algorithms which may take eons to finish).[133X
  
  [33X[0;0YAll of [5XYAGS[105X's backtracking operations report progress info at [10XInfoLevel[110X 3 to
  [5XYAGS[105X's info class [10XYAGSInfo.InfoClass[110X (see [14XB.24-3[114X). In short, this means that
  setting  [10XSetInfoLevel(YAGSInfo.InfoClass,3);[110X  will  cause  all  backtracking
  operations  to report progress information to the console: The contents of [10XL[110X
  will  be  reported  each  time  it  grows  in  length. Revert to the default
  behavior      by      setting      the      [10XInfoLevel[110X     to     0     using
  [10XSetInfoLevel(YAGSInfo.InfoClass,0);[110X[133X
  
  [4X[32X  Example  [32X[104X
    [4X[25Xgap>[125X [27XSetInfoLevel(YAGSInfo.InfoClass,3); [127X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X#I [  ][128X[104X
    [4X[28X#I [ 0 ][128X[104X
    [4X[28X#I [ 0, 0 ][128X[104X
    [4X[28X#I [ 0, 0, 0 ][128X[104X
    [4X[28X#I [ 0, 0, 1 ][128X[104X
    [4X[28X#I [ 0, 1 ][128X[104X
    [4X[28X#I [ 0, 1, 0 ][128X[104X
    [4X[28X#I [ 0, 1, 1 ][128X[104X
    [4X[28X#I [ 1 ][128X[104X
    [4X[28X#I [ 1, 0 ][128X[104X
    [4X[28X#I [ 1, 0, 0 ][128X[104X
    [4X[28X#I [ 1, 0, 1 ][128X[104X
    [4X[28X#I [ 1, 1 ][128X[104X
    [4X[28X#I [ 1, 1, 0 ][128X[104X
    [4X[28X#I [ 1, 1, 1 ][128X[104X
    [4X[28X[ [ 0, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 1 ], [ 1, 0, 0 ], [128X[104X
    [4X[28X[ 1, 0, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ] ][128X[104X
    [4X[25Xgap>[125X [27XSetInfoLevel(YAGSInfo.InfoClass,0);[127X[104X
    [4X[25Xgap>[125X [27XBacktrackBag([0,1],ReturnTrue,3,[]);[127X[104X
    [4X[28X[ [ 0, 0, 0 ], [ 0, 0, 1 ], [ 0, 1, 0 ], [ 0, 1, 1 ], [ 1, 0, 0 ], [128X[104X
    [4X[28X  [ 1, 0, 1 ], [ 1, 1, 0 ], [ 1, 1, 1 ] ][128X[104X
  [4X[32X[104X
  
  [33X[0;0YThe  output  of  the  progress info may be redirected to a file or character
  device by setting the variable [2XYAGSInfo.InfoOutput[102X ([14XB.24-4[114X) accordingly.[133X
  
  [33X[0;0YThe information in this section about progress reporting applies to all [5XYAGS[105X
  functions  that  internally  use  [2XBacktrack[102X ([14XB.2-1[114X) or [2XBacktrackBag[102X ([14XB.2-2[114X),
  namely   [2XCompletesOfGivenOrder[102X   ([14XB.3-14[114X),  [2XOrientations[102X  ([14XB.15-4[114X)  and  all
  morphism-related operations in Chapter [14X5[114X.[133X
  
